import json
import datetime as dt
import emoji
import requests


''' 
    –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    
    get_list_of_group()
    read_group_data()
    get_user_status()
    get_student_status()
    get_group_list_id()
    get_info_about_student()
    update_last_user_command_s()
    update_last_bot_msg_s()
    get_last_user_command_s()
    get_last_bot_msg_s()
    update_last_user_command_t()
    update_last_bot_msg_t()
    get_last_user_command_t()
    get_last_bot_msg_t()
    get_group_list()
    read_data_file()
    read_timetable_file()
    check_student()
    add_new_student()
    check_teacher()
    add_new_teacher()
    get_timetable()
    find_students()

'''

#telegram_id - STRING!!!!

def is_valid(dict_of_param):
    for param in dict_of_param.keys():
        if param == 'last_user_command' or param == 'last_bot_msg':
            continue
        if dict_of_param[param] == '':
            return False
    else:
        return True


def get_user_status_un(telegram_id):
    user_info = read_data_file()['list_of_unregistered_users'][telegram_id]

    return user_info['user_status']


def get_info_about_unregistered_teacher(telegram_id):
    ''''''
    teacher_info = read_data_file()["list_of_unregistered_users"][telegram_id]
    ti = teacher_info

    teacher_info_text = f'''\t–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ:
    –ò–º—è: {ti["teacher_name"]}
    –§–∞–º–∏–ª–∏—è: {ti["teacher_family_name"]}
    –û—Ç—á–µ—Å—Ç–≤–æ: {ti["teacher_father_name"]}
    '''

    return teacher_info_text


def remove_unregistered_user(telegram_id):
    '''–£–¥–∞–ª–µ–Ω–∏–µ "–Ω–µ–∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" –∏–∑ –±–∞–∑—ã'''
    data = read_data_file()
    del data["list_of_unregistered_users"][telegram_id]

    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
        json.dump(data, f_write, ensure_ascii=False)

    return None


def get_student_group(telegram_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞'''
    student_info = read_data_file()["list_of_students"][telegram_id]

    return student_info["student_group"]

def get_teacher_name_and_father_name(telegram_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'''
    teacher_info = read_data_file()["list_of_teachers"][telegram_id]

    return f"{teacher_info['teacher_name']} {teacher_info['teacher_father_name']}"

def get_list_of_group(name_of_faculty, year_of_study): #year_of_study - STRING!!!
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏ –∫—É—Ä—Å–∞'''
    list_of_groups = read_group_data()[name_of_faculty][year_of_study]
    if len(list_of_groups):
        list_of_groups_text = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø:'
        for num_of_group in range(len(list_of_groups)):
            list_of_groups_text += f"\n{num_of_group + 1}. {list_of_groups[num_of_group]}"
        return list_of_groups_text, list_of_groups
    else:
        return "–ì—Ä—É–ø–ø –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ –∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫—É—Ä—Å–µ –µ—â—ë –Ω–µ—Ç –≤ –±–∞–∑–µ(", []


def read_group_data():
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑—ã –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø'''
    with open("json_group_data.json", "r", encoding="utf-8") as f_read:
        data = json.load(f_read)

    return data


def get_user_status(telegram_id):
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    data = read_data_file()
    if telegram_id in data["list_of_students"].keys():
        return get_student_status(telegram_id)
    else:
        return "–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´"


def get_student_status(telegram_id): 
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞'''
    student_info = read_data_file()["list_of_students"][telegram_id]

    return student_info["status"]


def get_group_list_id(student_group):
    '''–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏'''
    list_of_students = read_data_file()["list_of_students"]
    list_of_students_id = []
    
    for telegram_id in list_of_students.keys():
        if list_of_students[telegram_id]["student_group"] == student_group:
            list_of_students_id.append(int(telegram_id))
    
    return list_of_students_id


def get_group_list_id_for_headmen(student_group):
    '''–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–±–µ–∑ —Å—Ç–∞—Ä–æ—Å—Ç—ã)'''
    list_of_students = read_data_file()["list_of_students"]
    list_of_students_id = []
    
    for telegram_id in list_of_students.keys():
        if list_of_students[telegram_id]["student_group"] == student_group and list_of_students[telegram_id]["status"] != '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
            list_of_students_id.append(int(telegram_id))
    
    return list_of_students_id


def add_info_about_unregistered_student(dict_of_param, telegram_id):
    ''''''
    data = read_data_file()
    data["list_of_unregistered_users"][telegram_id] = dict_of_param
    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
        json.dump(data, f_write, ensure_ascii=False)

    return None

def add_info_about_unregistered_teacher(dict_of_param, telegram_id):
    ''''''
    data = read_data_file()
    data["list_of_unregistered_users"][telegram_id] = dict_of_param
    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
        json.dump(data, f_write, ensure_ascii=False)

    return None


def get_info_about_unregistered_student(telegram_id):
    ''''''
    list_of_unregistered_users = read_data_file()["list_of_unregistered_users"][telegram_id]
    louu = list_of_unregistered_users

    info = f'''\t–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ:
    –ò–º—è: {louu["student_name"]}
    –§–∞–º–∏–ª–∏—è: {louu["student_family_name"]}
    –§–∞–∫—É–ª—å—Ç–µ—Ç: {louu["name_of_faculty"]}
    –ö—É—Ä—Å: {louu["year_of_study"]}
    –ì—Ä—É–ø–ø–∞: {louu["student_group"]}
    –°—Ç–∞—Ç—É—Å: {louu["status"]}
    '''

    return info


def get_list_of_faculties():
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤'''
    list_of_faculties = list(read_group_data().keys())

    return list_of_faculties


def get_info_about_student(telegram_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ'''
    list_of_students = read_data_file()["list_of_students"]
    los = list_of_students[telegram_id]
    
    info = f'''\t–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ:
    –ò–º—è: {los["sudent_name"]}
    –§–∞–º–∏–ª–∏—è: {los["sutdent_family_name"]}
    –§–∞–∫—É–ª—å—Ç–µ—Ç: {los["name_of_faculty"]}
    –ö—É—Ä—Å: {los["year_of_study"]}
    –ì—Ä—É–ø–ø–∞: {los["student_group"]}
    –°—Ç–∞—Ç—É—Å: {los["status"]}
    –ó–≤–∞–Ω–∏–µ: {los["rank"]}'''
    
    return info


def update_last_user_command_un(telegram_id, command):
    ''''''
    file_work = read_data_file()
    file_work["list_of_unregistered_users"][telegram_id]["last_user_command"] = command

    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
        json.dump(file_work, f_write, ensure_ascii=False)

    return


def get_info_about_unregistered_teacher_dict(telegram_id):
    ''''''
    user_info = read_data_file()["list_of_unregistered_users"][telegram_id]

    return user_info


def get_info_about_unregistered_student_dict(telegram_id):
    ''''''
    user_info = read_data_file()["list_of_unregistered_users"][telegram_id]

    return user_info


def get_last_bot_msg_un(telegram_id):
    ''''''
    unregistered_user_info = read_data_file()["list_of_unregistered_users"][telegram_id]
    
    return unregistered_user_info["last_bot_msg"]


def update_last_bot_msg_un(telegram_id, command):
    ''''''
    file_work = read_data_file()
    file_work["list_of_unregistered_users"][telegram_id]["last_bot_msg"] = command

    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
        json.dump(file_work, f_write, ensure_ascii=False)

    return


def get_last_user_command_un(telegram_id):
    ''''''
    unregistered_user_info = read_data_file()["list_of_unregistered_users"][telegram_id]
    
    return unregistered_user_info["last_user_command"]


def update_last_user_command_s(telegram_id, command):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –≤–≤–æ–¥–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'''
    file_work = read_data_file()
    file_work["list_of_students"][telegram_id]["last_user_command"] = command

    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
            json.dump(file_work, f_write, ensure_ascii=False)
    
    return


def update_last_bot_msg_s(telegram_id, msg):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –±–æ—Ç'''
    file_work = read_data_file()
    file_work["list_of_students"][telegram_id]["last_bot_msg"] = msg

    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
            json.dump(file_work, f_write, ensure_ascii=False)
    
    return


def get_last_user_command_s(telegram_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –≤–≤–æ–¥–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'''
    student_info = read_data_file()["list_of_students"][telegram_id]
    
    return student_info["last_user_command"]


def get_last_bot_msg_s(telegram_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –±–æ—Ç'''
    student_info = read_data_file()["list_of_students"][telegram_id]
    
    return student_info["last_bot_msg"]


def update_last_user_command_t(telegram_id, command):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –≤–≤–æ–¥–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'''
    file_work = read_data_file()
    file_work["list_of_teachers"][telegram_id]["last_user_command"] = command

    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
            json.dump(file_work, f_write, ensure_ascii=False)
    
    return


def update_last_bot_msg_t(telegram_id, msg):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –±–æ—Ç'''
    file_work = read_data_file()
    file_work["list_of_teachers"][telegram_id]["last_bot_msg"] = msg

    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
            json.dump(file_work, f_write, ensure_ascii=False)
    
    return


def get_last_user_command_t(telegram_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –≤–≤–æ–¥–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'''
    student_info = read_data_file()["list_of_teachers"][telegram_id]
    
    return student_info["last_user_command"]


def get_last_bot_msg_t(telegram_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –±–æ—Ç'''
    student_info = read_data_file()["list_of_teachers"][telegram_id]
    
    return student_info["last_bot_msg"]


def get_group_list(student_group):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã'''
    list_of_students = read_data_file()["list_of_students"]
    list_of_students_in_group_str = ""
    num_of_student = 1

    for student_telegram_id in list_of_students.keys():
        student_info = list_of_students[student_telegram_id]
        if student_info["student_group"] == student_group:
            list_of_students_in_group_str += f"\n{num_of_student}. {student_info['student_name']} {student_info['student_family_name']}"
            num_of_student += 1
            if student_info["status"] == "–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†":
                list_of_students_in_group_str += " - ü§†"
    
    if len(list_of_students_in_group_str):
        list_of_students_in_group_str = f"\t–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã {student_group}:" + list_of_students_in_group_str
    else:
        list_of_students_in_group_str = f"–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –∏–∑ –≥—Ä—É–ø–ø—ã {student_group} üòê"

    return list_of_students_in_group_str


def get_chosen_faculty(telegram_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ * —É—á–∏—Ç–µ–ª–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞'''
    teacher_info = read_data_file()["list_of_teachers"][telegram_id]

    return teacher_info["chosen_faculty"]


def update_chosen_faculty(telegram_id, name_of_faculty):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ * —É—á–∏—Ç–µ–ª–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞'''
    file_work = read_data_file()
    file_work["list_of_teachers"][telegram_id]["chosen_faculty"] = name_of_faculty

    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
            json.dump(file_work, f_write, ensure_ascii=False)
    
    return


def read_data_file():
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ '''
    with open("json_test_data.json", "r", encoding="utf-8") as f_read:
        text = json.load(f_read)
    return text


def read_timetable_file(code_of_group):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω—è –±–∞–∑—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π'''
    with open(f"parsed_timetable/epf/{code_of_group}-d.json", "r", encoding="utf-8") as f_read:
        text = json.load(f_read)

    return text


def group_has_headmen(student_group):
    ''''''
    list_of_students = read_data_file()["list_of_students"]

    for student_info in list_of_students.values():
        if student_info["student_group"] == student_group:
            if student_info["status"] == "–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†":
                return False
    else:
        return True


def check_student(telegram_id):
    '''–§—É–∫–Ω—Ü–∏—è –¥–ª—è –ø—Ä–æ–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ'''
    list_of_students = read_data_file()["list_of_students"]
    if telegram_id in list_of_students:
        return {"status_value" : False, "status_msg" : "–¢–∞–∫–æ–π —Å—Ç—É–¥–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—åüò°!", "student_info" : list_of_students[telegram_id]}
    else:
        return {"status_value" : True, "status_msg" : "–û—Ç–ª–∏—á–Ω–æüòÉ! –ú—ã –≤–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –±–∞–∑—É üñ•!"}


def read_code_of_group():
    ''''''
    with open("json_code_of_group.json", "r", encoding="utf-8") as f_read:
        text = json.load(f_read)

    return text

def remove_student(telegram_id):
    ''''''
    data = read_data_file()
    del data["list_of_students"][telegram_id]

    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
            json.dump(data, f_write, ensure_ascii=False)

    return None

def remove_teacher(telegram_id):
    ''''''
    data = read_data_file()
    del data["list_of_teachers"][telegram_id]

    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
            json.dump(data, f_write, ensure_ascii=False)

    return None

def get_code_of_group(name_of_faculty):
    code_of_group = read_code_of_group()[name_of_faculty]

    return code_of_group

def add_new_student(dict_of_param, telegram_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ'''
    result = check_student(telegram_id)
    
    if result["status_value"]:
        data = read_data_file()
        data["list_of_students"][telegram_id] = dict_of_param
        with open("json_test_data.json", "w", encoding="utf-8") as f_write:
            json.dump(data, f_write, ensure_ascii=False)
    
    return result["status_msg"]


def check_teacher(telegram_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–æ—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ'''
    list_of_teachers = read_data_file()["list_of_teachers"]
    if telegram_id in list_of_teachers:
        teacher_info = list_of_teachers[telegram_id]
        return {"status_value" : False, "status_msg" : "–¢–∞–∫–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—åüôÅ!", "teacher_info" : teacher_info}
    else:
        return {"status_value" : True, "status_msg" : "–û—Ç–ª–∏—á–Ω–æüòÉ! –ú—ã –≤–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –±–∞–∑—É üñ•!"}


def add_new_teacher(dict_of_param, telegram_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ'''
    result = check_teacher(telegram_id)
    
    if result["status_value"]:
        list_of_students = read_data_file()
        list_of_students["list_of_teachers"][telegram_id] = dict_of_param
        with open("json_test_data.json", "w", encoding="utf-8") as f_write:
            json.dump(list_of_students, f_write, ensure_ascii=False)
    
    return result["status_msg"]


def user_in_unregistered_list(telegram_id):
    list_of_unregistered_users = read_data_file()["list_of_unregistered_users"]

    return telegram_id in list_of_unregistered_users.keys()


def user_is_registered(telegram_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π'''
    data = read_data_file()

    return telegram_id in data["list_of_students"] or telegram_id in data["list_of_teachers"]


def get_last_user_id_s(telegram_id):
    student_info = read_data_file()["list_of_students"][telegram_id]

    return student_info['last_id']


def update_last_user_id_s(telegram_id, user_id):
    data = read_data_file()
    data["list_of_students"][telegram_id]["last_id"] = user_id

    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
        json.dump(data, f_write, ensure_ascii=False)

    return None


def get_info_about_student_dict(telegram_id):
    student_info = read_data_file()["list_of_students"][telegram_id]

    return student_info


def get_last_user_id_t(telegram_id):
    teacher_info = read_data_file()["list_of_teachers"][telegram_id]

    return teacher_info['last_id']


def update_last_user_id_t(telegram_id, user_id):
    data = read_data_file()
    data["list_of_teachers"][telegram_id]["last_id"] = user_id

    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
        json.dump(data, f_write, ensure_ascii=False)

    return None


def update_teacher_msg(telegram_id, msg):
    data = read_data_file()
    data["list_of_teachers"][telegram_id]["teacher_msg"] = msg

    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
        json.dump(data, f_write, ensure_ascii=False)

    return None


def get_teacher_msg(telegram_id):
    teacher_info = read_data_file()["list_of_teachers"][telegram_id]

    return teacher_info['teacher_msg']


def update_student_msg(telegram_id, msg):
    data = read_data_file()
    data["list_of_students"][telegram_id]["student_msg"] = msg

    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
        json.dump(data, f_write, ensure_ascii=False)

    return None


def get_student_msg(telegram_id):
    teacher_info = read_data_file()["list_of_students"][telegram_id]

    return teacher_info['student_msg']


def user_is_headmen(telegram_id):
    student_info = read_data_file()["list_of_students"][telegram_id]
    if student_info["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
        return True
    else:
        return False


def get_timetable(telegram_id, user_weekday=None, date=None):
    '''–§—É–∫–Ω—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å'''
    result = check_student(telegram_id)
    
    if not result["status_value"]:
        '''–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ç—ã –¥–Ω—è, –∫–æ—Ç–æ—Ä—ã–π –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'''
        if user_weekday:
            today_d = dt.datetime.date(dt.datetime.now())
            weekday_now = today_d.isoweekday()
            diff = user_weekday - weekday_now
            diff = dt.timedelta(days = diff)
            user_date = today_d + diff
            user_date_str = user_date.strftime("%d.%m.%Y")
        elif date:
            user_date_str = date
        '''–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ'''

        r = requests.get(url='https://yabzik.online/unisystem/public/api/schedule', params={
            'speciality': result["student_info"]["code_of_group"] + '-d',
            'course': result["student_info"]["year_of_study"],
            'date': user_date_str
        })
        schedule = r.json()['schedule']

        timetable_str = ""
        numerals = ['I', 'II', 'III', 'IV']
        if schedule:
            for lesson in schedule:
                name_of_lesson = lesson['title']
                audience_and_teacher = lesson['subtitle']
                if name_of_lesson and len(name_of_lesson):
                    em = emoji.choose(' '.join([name_of_lesson, audience_and_teacher]))
                    timetable_str += f"\n{numerals[lesson['index']-1]}. {em} {name_of_lesson}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—è: {audience_and_teacher};"
        else:
            return "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –¥–ª—è —Ç–µ–±—è –Ω–µ —Å–æ—Å—Ç–∞–≤–∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µü•∫("
        if len(timetable_str):
            return timetable_str
        else:
            return "–í —ç—Ç–æ—Ç –¥–µ–Ω—å —É —Ç–µ–±—è –Ω–µ—Ç –ø–∞—ÄüôÇ. –ú–æ–∂–µ—à—å –ø–æ—Å–ø–∞—Ç—å –ø–æ–¥–æ–ª—å—à–µ) üò¥"

    else:
        return result["status_msg"]

def find_students(query):
    '''–§—É–∫–Ω—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É'''
    list_of_students = read_data_file()["list_of_students"]
    result = {}
    for telegram_id, student_data in list_of_students.items():
        if student_data.items() >= query.items():
            result[telegram_id] = student_data
    return result


def get_answer_t(telegram_id):
    teacher_info = read_data_file()["list_of_teachers"][telegram_id]

    return teacher_info["answer"]


def update_answer_t(telegram_id, answer):
    data = read_data_file()
    data["list_of_teachers"][telegram_id]["answer"] = answer

    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
        json.dump(data, f_write, ensure_ascii=False)

    return None


def get_answer_s(telegram_id):
    teacher_info = read_data_file()["list_of_students"][telegram_id]

    return teacher_info["answer"]


def update_answer_s(telegram_id, answer):
    data = read_data_file()
    data["list_of_students"][telegram_id]["answer"] = answer

    with open("json_test_data.json", "w", encoding="utf-8") as f_write:
        json.dump(data, f_write, ensure_ascii=False)

    return None


def get_full_group_list():
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø'''
    data_of_group = read_group_data()
    full_group_list = []
    for faculty in data_of_group.keys():
        for year_of_study in data_of_group[faculty].keys():
            full_group_list += data_of_group[faculty][year_of_study]

    return full_group_list

'''def write():
    with open("json_work_file.json", "w", encoding="utf-8") as f_write:
        pass'''