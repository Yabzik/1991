import telebot
from telebot import types
import time
import datetime
import urllib.request, json 
import json_work_new

bot = telebot.TeleBot("1047628795:AAHR8i8R8Nri4nVmcAyOZTackPe3jvnPk3c")
faculty = ''
course = ''
times = ''
notif = ''
status = ''
curriculum = ''
user_id = ''
groups= ''
stud_list= ''

@bot.message_handler(commands=['subject'])
def handle_text(message):
    user_id = str(message.from_user.id)   
    status= json_work_new.get_user_status(user_id) #–ø–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    status= '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äç'
    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
    if status == 'student' :
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    elif status == 'starosta' :
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Å–∏–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
    elif status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äç' :
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏c–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
        #user_markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É')#send_msg
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=user_markup)
    
@bot.message_handler(func=lambda mess: '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' == mess.text or '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏c–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' == mess.text, content_types=['text'])
def handle_text(message):
    user_markup1 = telebot.types.ReplyKeyboardMarkup(True, False)
    user_markup1.row('–ï–ü–§')
    user_markup1.row('–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π')
    user_markup1.row('–§–∏–ª–∏–ª–æ–≥–∏—è')
    user_markup1.row('–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏')
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', reply_markup=user_markup1)
    
@bot.message_handler(func=lambda mess: '–ï–ü–§' == mess.text or
                     '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π' == mess.text or '–§–∏–ª–∏–ª–æ–≥–∏—è' == mess.text or
                     '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏' == mess.text, content_types=['text'])
def handle_text(message):
    faculty= message.text
    print(faculty)
    user_markup1 = telebot.types.ReplyKeyboardMarkup(True, False)
    user_markup1.row('1 –∫—É—Ä—Å', '2 –∫—É—Ä—Å')
    user_markup1.row('3 –∫—É—Ä—Å', '4 –∫—É—Ä—Å')
    user_markup1.row('5 –∫—É—Ä—Å', '6 –∫—É—Ä—Å')
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:', reply_markup=user_markup1)
    
@bot.message_handler(func=lambda mess: '1 –∫—É—Ä—Å' == mess.text or '2 –∫—É—Ä—Å' == mess.text or '3 –∫—É—Ä—Å' == mess.text or '4 –∫—É—Ä—Å' == mess.text or '5 –∫—É—Ä—Å' == mess.text or '6 –∫—É—Ä—Å' == mess.text, content_types=['text'])
def send_daily_notifications(message):
    course= message.text
    course= course[0]
    print(course)
    if status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' :
        if course  and path and times :
            pass
        else:
            user_markup1 = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup1.row('1 –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '2 –í—Ç–æ—Ä–Ω–∏–∫')
            user_markup1.row('3 –°—Ä–µ–¥–∞', '4 –ß–µ—Ç–≤–µ—Ä–≥')
            user_markup1.row('5 –ü—è—Ç–Ω–∏—Ü–∞', '6 –°—É–±–±–æ—Ç–∞')
            user_markup1.row('7 –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
            bot.send_message(message.from_user.id, '–î–µ–Ω—å:', reply_markup=user_markup1) 
    else :
        bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø')
        times = str(datetime.datetime.today().strftime('%Y'))
        times=times[2:]
        times=str(int(times)-int(course)+1)
        print(times)
        groups=json_work_new.get_list_of_group(faculty, times)    #–ü–æ–ª—É—á–µ–Ω–∏–µ –°–ø—Å–∏–∫–∞ –≥—Ä—É–ø–ø
        
@bot.message_handler(func=lambda mess: '–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø', content_types=['text'])
def handle_text(message):
    if course  and path :
        pass
    else:
        groups=message.text
        result = [x.strip(' ') for x in groups.split(',')]
        for i in result:
           stud_list = json_work_new.get_group_list_id(i)
    

@bot.message_handler(func=lambda mess: '1 –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' == mess.text or '2 –í—Ç–æ—Ä–Ω–∏–∫' == mess.text or '3 –°—Ä–µ–¥–∞' == mess.text or '4 –ß–µ—Ç–≤–µ—Ä–≥' == mess.text or '5 –ü—è—Ç–Ω–∏—Ü–∞' == mess.text or '6 –°—É–±–±–æ—Ç–∞' == mess.text or '7 –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' == mess.text, content_types=['text'])
def handle_text(message):
    day= message.text
    day= day[0]    
    user_id = str(message.from_user.id)  
    curriculum = json_work_new.get_timetable(id, day[0]) #–ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    
#@bot.message_handler(func=lambda mess: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' == mess.text or '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞' == mess.text or '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é' == mess.text, content_types=['text'])    
#def handle_text(message):
 #   if message.text=='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
  #  with urllib.request.urlopen("...link...") as url:
   # data = json.loads(url.read().decode())
    #else:
    #if message.text=='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞':
    #
    #else:
    #if message.text=='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é':
    
#def write():
 #   with open("json_work_file.json", "w", encoding="utf-8") as f_write:  
#@bot.message_handler(func=lambda mess: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' == mess.text, content_types=['text'])
#def handle_text(message):
 #   user_markup1 = telebot.types.ReplyKeyboardMarkup(True, False)
  #  user_markup1.row('15 –º–∏–Ω—É—Ç')
   # user_markup1.row('30 –º–∏–Ω—É—Ç')
    #user_markup1.row('45 –º–∏–Ω—É—Ç')
    #user_markup1.row('60 –º–∏–Ω—É—Ç')
    #user_markup1.row('–≤—ã–∫–ª—é—á–∏—Ç—å')
    #bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:', reply_markup=user_markup1)

#@bot.message_handler(func=lambda mess: '15 –º–∏–Ω—É—Ç' == mess.text '30 –º–∏–Ω—É—Ç' == mess.text '45 –º–∏–Ω—É—Ç' == mess.text '60 –º–∏–Ω—É—Ç' == mess.text, content_types=['text'])
#def handle_text(message):
 #   notif=
  #  bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:', reply_markup=user_markup1)
bot.polling()
input()