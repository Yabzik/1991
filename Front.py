import telebot
from telebot import types
import time
import datetime
import urllib.request, json 
import json_work_new
import config
import scheduler_parser

bot = telebot.TeleBot(config.token)
faculty = '–§–∏–ª–æ–ª–æ–≥–∏—è'
course = ''
times = ''
notif = ''
curriculum = ''
groups= ''
result=''
stud_list= ''
id_list= ''
starosta_info= ''

@bot.message_handler(commands=['help'])
def handle_text(message):
    user_id = str(message.from_user.id)   
    user_status = json_work_new.get_user_status(user_id) 

    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

    if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì' :
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        json_work_new.update_last_user_command_s(user_id, message.text)

    elif user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' :
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' , '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        json_work_new.update_last_user_command_s(user_id, message.text)

    elif user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' :
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
        json_work_new.update_last_user_command_t(user_id, message.text)

    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=user_markup)


@bot.message_handler(func=lambda mess: '–û—Ç–º–µ–Ω–∏—Ç—å' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)   
    user_status = json_work_new.get_user_status(user_id)

    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

    if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì' :
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        json_work_new.update_last_user_command_s(user_id, message.text)

    elif user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' :
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' , '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        json_work_new.update_last_user_command_s(user_id, message.text)

    elif user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' :
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
        json_work_new.update_last_user_command_t(user_id, message.text)

    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=user_markup)


@bot.message_handler(func=lambda mess: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º' == mess.text, content_types=['text'])
def handle_text(message):
        user_id = str(message.from_user.id) 
        user_status = json_work_new.get_user_status(user_id)

        if user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' :
            #if last_command == 
            json_work_new.update_last_user_command_s(user_id, message.text)
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')

        else:
            if status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                json_work_new.update_last_user_command_s(user_id, "")

            elif status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
                json_work_new.update_last_user_command_t(user_id, "")

            bot.send_message(message.from_user.id, "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")


@bot.message_handler(func=lambda mess: '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)
    user_status = json_work_new.get_user_status(user_id)

    if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì' or user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
        json_work_new.update_last_user_command_s(user_id, message.text)

        user_markup1 = telebot.types.ReplyKeyboardMarkup(True, False)
        user_markup1.row('1. –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '2. –í—Ç–æ—Ä–Ω–∏–∫')
        user_markup1.row('3. –°—Ä–µ–¥–∞', '4. –ß–µ—Ç–≤–µ—Ä–≥')
        user_markup1.row('5. –ü—è—Ç–Ω–∏—Ü–∞', '6. –°—É–±–±–æ—Ç–∞')
        user_markup1.row('7. –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
        user_markup1.row('–û—Ç–º–µ–Ω–∏—Ç—å')

        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:', reply_markup=user_markup1)
    else:
        json_work_new.update_last_user_command_t(user_id, "")
        bot.send_message(message.from_user.id, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')


@bot.message_handler(func=lambda mess: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)   
    user_status = json_work_new.get_user_status(user_id)

    if status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
        headman_group = json_work_new.get_student_group(user_id)
        group_list = json_work_new.get_group_list(result)
        bot.send_message(message.from_user.id, group_list)

        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' , '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=user_markup1)

    else:
        if status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                json_work_new.update_last_user_command_s(user_id, "")

        elif status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
            json_work_new.update_last_user_command_t(user_id, "")

        bot.send_message(message.from_user.id, "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")


@bot.message_handler(func=lambda mess: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)   
    user_status = json_work_new.get_user_status(user_id)
    
    if user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
        json_work_new.update_last_user_command_t(user_id, message.text)

        user_markup1 = telebot.types.ReplyKeyboardMarkup(True, False)
        user_markup1.row('–ï–ü–§')
        user_markup1.row('–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π')
        user_markup1.row('–§–∏–ª–æ–ª–æ–≥–∏—è')
        user_markup1.row('–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏')
        user_markup1.row('–û—Ç–º–µ–Ω–∏—Ç—å')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', reply_markup=user_markup1)

    else:
        json_work_new.update_last_user_command_s(user_id, "")
        bot.send_message(message.from_user.id, "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
        
    
@bot.message_handler(func=lambda mess: '–ï–ü–§' == mess.text or
                     '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π' == mess.text or '–§–∏–ª–æ–ª–æ–≥–∏—è' == mess.text or
                     '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)
    user_status = json_work_new.get_user_status(user_id)

    if user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
        json_work_new.update_last_user_command_t(user_id, message.text)
        json_work_new.update_chosen_faculty(user_id, message.text)

        user_markup1 = telebot.types.ReplyKeyboardMarkup(True, False)
        user_markup1.row('1 –∫—É—Ä—Å', '2 –∫—É—Ä—Å')
        user_markup1.row('3 –∫—É—Ä—Å', '4 –∫—É—Ä—Å')
        user_markup1.row('5 –∫—É—Ä—Å', '6 –∫—É—Ä—Å')
        user_markup1.row('–û—Ç–º–µ–Ω–∏—Ç—å')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:', reply_markup=user_markup1)

    else:
        json_work_new.update_last_user_command_s(user_id, "")
        bot.send_message(message.from_user.id, "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
    
@bot.message_handler(func=lambda mess: '1 –∫—É—Ä—Å' == mess.text or '2 –∫—É—Ä—Å' == mess.text or '3 –∫—É—Ä—Å' == mess.text or '4 –∫—É—Ä—Å' == mess.text or '5 –∫—É—Ä—Å' == mess.text or '6 –∫—É—Ä—Å' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)   
    user_status= json_work_new.get_user_status(user_id)
    year_of_study = message.text[0]
    
    if user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
        json_work_new.update_last_user_command_t(user_id, "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        faculty = json_work_new.get_chosen_faculty(user_id)
        json_work_new.update_chosen_faculty(user_id, "")
        list_of_groups_text, list_of_groups = json_work_new.get_list_of_group(faculty, year_of_study)
        bot.send_message(message.from_user.id, list_of_groups_text)

        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        for name_of_group in list_of_groups:
            user_markup.row(name_of_group)          
            
        user_markup1.row('–û—Ç–º–µ–Ω–∏—Ç—å')    
        bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', reply_markup=user_markup)
        json_work_new.update_last_bot_msg_t(user_id,'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:')

    else:
        json_work_new.update_last_user_command_s(user_id, "")
        bot.send_message(message.from_user.id, "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")

       
@bot.message_handler(func=lambda mess: '1. –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' == mess.text or '2. –í—Ç–æ—Ä–Ω–∏–∫' == mess.text or '3. –°—Ä–µ–¥–∞' == mess.text or '4. –ß–µ—Ç–≤–µ—Ä–≥' == mess.text or '5. –ü—è—Ç–Ω–∏—Ü–∞' == mess.text or '6. –°—É–±–±–æ—Ç–∞' == mess.text or '7. –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id) 
    status= json_work_new.get_user_status(user_id) #–ø–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' or status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
        day = message.text[0]
        curriculum = json_work_new.get_timetable(user_id, user_weekday=int(day))

        
        bot.send_message(user_id, curriculum)
        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        if status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        else:
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' , '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=user_markup)
        '''if faculty == '':
            bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:')
        elif times == '':
            bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:')
        else:
             #–ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'''

@bot.message_handler(func=lambda mess: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º' == mess.text , content_types=['text'])
def handle_text(message):
        user_id = str(message.from_user.id)
        #status= json_work_new.get_user_status(user_id) #–ø–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        json_work_new.update_last_user_command_t(user_id,message.text)
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
    

@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id) 
    status= json_work_new.get_user_status(user_id) #–ø–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' :
        user_command = json_work_new.get_last_user_command_t(user_id)
        bot_command = json_work_new.get_last_bot_msg_t(user_id)
    elif status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
        user_command = json_work_new.get_last_user_command_s(user_id)
    
    if user_command=='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' and status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' and bot_command == '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:':
        group=message.text
        stud_list = json_work_new.get_group_list(group) #–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        bot.send_message(message.from_user.id, stud_list) 
        json_work_new.update_chosen_faculty(user_id,message.text)
            
        user_markup1 = telebot.types.ReplyKeyboardMarkup(True, False)
        user_markup1.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
        user_markup1.row(f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=user_markup1) 
    elif status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' and user_command == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º':
        group = json_work_new.get_chosen_faculty(user_id)
        print(group)
        id_list = json_work_new.get_group_list_id(group)
        for j in id_list:
            if status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
                teacher_initials = json_work_new.get_teacher_name_and_father_name(str(message.from_user.id))
                teacher_initials ='–ü–µ—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—å ' + teacher_initials + ' –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã: \n' + message.text
                bot.send_message(j, teacher_initials)
        bot.send_message(message.from_user.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º")
        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=user_markup)

    elif status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' and user_command == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º':
        result=json_work_new.get_student_group(user_id)
        id_list = json_work_new.get_group_list_id(result)
        starosta_initials = "–°—Ç–∞—Ä–æ—Å—Ç–∞: " + message.text
        for i in id_list:
            bot.send_message(i, starosta_initials)
        bot.send_message(message.from_user.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º")
        user_markup1 = telebot.types.ReplyKeyboardMarkup(True, False)
        user_markup1.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        user_markup1.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' , '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=user_markup1)
    else:
        bot.send_message(message.from_user.id, '–Ω–µ –ø–æ–Ω—è–≤')
     

def notify(faculty_code, year_of_study, date):
    students = {}
    if not year_of_study:
        students.update(json_work_new.find_students({'code_of_group': faculty_code}))
    else:
        students.update(json_work_new.find_students({'code_of_group': faculty_code, 'year_of_study': year_of_study}))

    print(students, {'code_of_group': faculty_code, 'year_of_study': year_of_study})

    for telegram_id, data in students.items():
        curriculum = json_work_new.get_timetable(telegram_id, date=date)
        bot.send_message(telegram_id, f"üëÄ –ò–∑–º–µ–Ω–∏–ª–æ—Å—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date}: {curriculum}")

scheduler_parser.notify_callback = notify

bot.polling()
input()