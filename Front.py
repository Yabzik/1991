import telebot
from telebot import types
import time
import datetime
import urllib.request, json 
import json_work_new
import config
import scheduler_parser

bot = telebot.TeleBot(config.token)


@bot.message_handler(commands=['start'])
def handle_text(message):
    user_id = str(message.from_user.id)

    if json_work_new.user_is_registered(user_id):
        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        user_markup.row('/help')
        bot.send_message(message.from_user.id, "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

    else:
        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        user_markup.row('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç ü§ì')
        user_markup.row('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´')
        bot.send_message(message.from_user.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}! üòÉ\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µüë®‚Äçüíªüë©‚Äçüíª", reply_markup=user_markup)


@bot.message_handler(commands=['help'])
def handle_text(message):
    user_id = str(message.from_user.id)

    if json_work_new.user_is_registered(user_id):   
        user_status = json_work_new.get_user_status(user_id) 

        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

        if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì' :
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
            json_work_new.update_last_user_command_s(user_id, message.text)

        elif user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' :
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
            user_markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            json_work_new.update_last_user_command_s(user_id, message.text)

        elif user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' :
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
            user_markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            json_work_new.update_last_user_command_t(user_id, message.text)

        user_markup.row('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=user_markup)

    else:
        bot.send_message(message.from_user.id, "–í—ã –Ω–µ—Ç –≤ –±–∞–∑–µ! –î–∞–≤–∞–π—Ç–µ —Ä–µ–≥–∞—Ç—å—Å—è:)")


@bot.message_handler(func=lambda mess: '–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)   
    user_status = json_work_new.get_user_status(user_id)

    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

    if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì' :
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
        json_work_new.update_last_user_command_s(user_id, message.text)

    elif user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' :
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã' , '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        json_work_new.update_last_user_command_s(user_id, message.text)

    elif user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' :
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
        user_markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        json_work_new.update_last_user_command_t(user_id, message.text)
    user_markup.row('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=user_markup)


@bot.message_handler(func=lambda mess: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º' == mess.text, content_types=['text'])
def handle_text(message):
        user_id = str(message.from_user.id) 
        user_status = json_work_new.get_user_status(user_id)

        if user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' :
            #if last_command == 
            json_work_new.update_last_user_command_s(user_id, message.text)
            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', reply_markup=user_markup)

        else:
            if status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                json_work_new.update_last_user_command_s(user_id, "")

            elif status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
                json_work_new.update_last_user_command_t(user_id, "")

            bot.send_message(message.from_user.id, "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")


@bot.message_handler(func=lambda mess: '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)
    user_status = json_work_new.get_user_status(user_id)

    if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì' or user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
        json_work_new.update_last_user_command_s(user_id, message.text)

        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        user_markup.row('1. –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '2. –í—Ç–æ—Ä–Ω–∏–∫')
        user_markup.row('3. –°—Ä–µ–¥–∞', '4. –ß–µ—Ç–≤–µ—Ä–≥')
        user_markup.row('5. –ü—è—Ç–Ω–∏—Ü–∞', '6. –°—É–±–±–æ—Ç–∞')
        user_markup.row('7. –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
        user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')

        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:', reply_markup=user_markup)
    else:
        json_work_new.update_last_user_command_t(user_id, "")
        bot.send_message(message.from_user.id, '–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')


@bot.message_handler(func=lambda mess: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)   
    user_status = json_work_new.get_user_status(user_id)

    if user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' or user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
        student_group = json_work_new.get_student_group(user_id)
        group_list = json_work_new.get_group_list(student_group)
        bot.send_message(message.from_user.id, group_list)

        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
        else:
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã' ) 
            user_markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        user_markup.row('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=user_markup)

    else:
        if user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
            json_work_new.update_last_user_command_t(user_id, "")

        bot.send_message(message.from_user.id, "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")


@bot.message_handler(func=lambda mess: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' == mess.text or '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)   
    user_status = json_work_new.get_user_status(user_id)
    
    if user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
        json_work_new.update_last_user_command_t(user_id, message.text)
        
        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        for i in json_work_new.get_list_of_faculties():
            user_markup.row(i)
        user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', reply_markup=user_markup)

    else:
        json_work_new.update_last_user_command_s(user_id, "")
        bot.send_message(message.from_user.id, "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
        
    
@bot.message_handler(func=lambda mess: mess.text in json_work_new.get_list_of_faculties(), content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)
    user_status = json_work_new.get_user_status(user_id)
    if json_work_new.user_is_registered(user_id): 
        user_status = json_work_new.get_user_status(user_id)
        if user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
            #json_work_new.update_last_user_command_t(user_id, message.text)
            json_work_new.update_chosen_faculty(user_id, message.text)

            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

            for course_num in range (1, 7, 2):
                course = str(course_num) + ' –∫—É—Ä—Å'
                course_p = str(course_num + 1) + ' –∫—É—Ä—Å'
                user_markup.row(course, course_p)

            user_markup.row("–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
            
            bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:', reply_markup=user_markup)

        else:
            json_work_new.update_last_user_command_s(user_id, "")
            bot.send_message(message.from_user.id, "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
            
    elif json_work_new.user_in_unregistered_list(user_id):
        if json_work_new.get_last_user_command_un(user_id) == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç":
            dict_of_param = json_work_new.get_info_about_unregistered_student_dict(user_id)
            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            if message.text in json_work_new.get_list_of_faculties():
                dict_of_param["name_of_faculty"] = message.text
                dict_of_param["student_group"] = ''
                dict_of_param["year_of_study"] = ''
                bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –≤—ã —Ä–∞–Ω–µ–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –ø–æ–ª—è –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫—É—Ä—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö –∑–∞–Ω–æ–≤–æ")
                json_work_new.add_info_about_unregistered_student(dict_of_param, user_id)
            user_info = json_work_new.get_info_about_unregistered_student(user_id)
            bot.send_message(message.from_user.id, user_info)
                
            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
            if dict_of_param["student_group"] != '':
                if json_work_new.group_has_headmen(dict_of_param["student_group"]) and dict_of_param['status'] == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                    user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ü§†")

            if dict_of_param["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                        user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì")

            if json_work_new.is_valid(dict_of_param):
                    user_markup.row('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
            user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
            bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=user_markup)
        
    
@bot.message_handler(func=lambda mess: '1 –∫—É—Ä—Å' == mess.text or '2 –∫—É—Ä—Å' == mess.text or '3 –∫—É—Ä—Å' == mess.text or '4 –∫—É—Ä—Å' == mess.text or '5 –∫—É—Ä—Å' == mess.text or '6 –∫—É—Ä—Å' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)

    if json_work_new.user_is_registered(user_id): 
        user_status= json_work_new.get_user_status(user_id)
        year_of_study = message.text[0]
        
        if user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
            #json_work_new.update_last_user_command_t(user_id, "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            faculty = json_work_new.get_chosen_faculty(user_id)
            json_work_new.update_chosen_faculty(user_id, "")
            list_of_groups_text, list_of_groups = json_work_new.get_list_of_group(faculty, year_of_study)
            bot.send_message(message.from_user.id, list_of_groups_text)
            last_teacher_command = json_work_new.get_last_user_command_t(user_id)

            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

            if len(list_of_groups):
                for name_of_group in list_of_groups:
                    user_markup.row(name_of_group)          
                
                user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')

                if last_teacher_command == '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤':
                    bot_msg = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å'
                elif last_teacher_command == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º':
                    bot_msg = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, —Å—É—Ç–¥–µ–Ω—Ç–∞–º –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"

                bot.send_message(message.from_user.id, bot_msg, reply_markup=user_markup)
                json_work_new.update_last_bot_msg_t(user_id, bot_msg)

            else:
                user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
                user_markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
                user_markup.row('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
                bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=user_markup)

        else:
            json_work_new.update_last_user_command_s(user_id, "")
            bot.send_message(message.from_user.id, "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")

    elif json_work_new.user_in_unregistered_list(user_id):
        if json_work_new.get_last_user_command_un(user_id) == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å":   
            dict_of_param = json_work_new.get_info_about_unregistered_student_dict(user_id)
            if dict_of_param["name_of_faculty"] != '':
                dict_of_param["year_of_study"] = message.text[0]
                dict_of_param["student_group"] = ''
                bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∫—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –≤—ã —Ä–∞–Ω–µ–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –ø–æ–ª—è –≥—Ä—É–ø–ø–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—ë –∑–∞–Ω–æ–≤–æ")
                json_work_new.add_info_about_unregistered_student(dict_of_param, user_id)
                user_info = json_work_new.get_info_about_unregistered_student(user_id)
                bot.send_message(message.from_user.id, user_info)

            
            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')

            if dict_of_param["student_group"] != '':
                if json_work_new.group_has_headmen(dict_of_param["student_group"]) and dict_of_param['status'] == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                    user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ü§†")

            if dict_of_param["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                        user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì")

            if json_work_new.is_valid(dict_of_param):
                    user_markup.row('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
            user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
            bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=user_markup)

        else:
            print("hello")

       
@bot.message_handler(func=lambda mess: '1. –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' == mess.text or '2. –í—Ç–æ—Ä–Ω–∏–∫' == mess.text or '3. –°—Ä–µ–¥–∞' == mess.text or '4. –ß–µ—Ç–≤–µ—Ä–≥' == mess.text or '5. –ü—è—Ç–Ω–∏—Ü–∞' == mess.text or '6. –°—É–±–±–æ—Ç–∞' == mess.text or '7. –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id) 
    user_status = json_work_new.get_user_status(user_id)

    if user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' or user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
        day = message.text[0]
        timetable = json_work_new.get_timetable(user_id, user_weekday=int(day))
        bot.send_message(user_id, timetable)

        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        
        if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')

        else:
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã' , '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')

        user_markup.row('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=user_markup)
    
    else:
        json_work_new.update_last_user_command_t(user_id, "")
        bot.send_message(message.from_user.id, "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
    

@bot.message_handler(func=lambda mess: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´" == mess.text, content_types=['text'])
def heandle_text(message):
    user_id = str(message.from_user.id)

    if not json_work_new.user_is_registered(user_id):
        if not json_work_new.user_in_unregistered_list(user_id):
            dict_of_param = {
                "teacher_name": message.from_user.first_name,
                "teacher_family_name": message.from_user.last_name,
                "teacher_father_name": "",
                "user_status": "teacher",
                "last_user_command": "",
                "last_bot_msg": ""
            }

            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ')
            user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')

            json_work_new.add_info_about_unregistered_student(dict_of_param, user_id)
            info = json_work_new.get_info_about_unregistered_teacher(user_id)
            bot.send_message(message.from_user.id, info, reply_markup=user_markup)

        else:
            bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

    else:
        bot.send_message(message.from_user.id, "–Ω–µ–ø–æ–Ω–µ–ª")
        #–û–±–Ω—É–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ 


@bot.message_handler(func=lambda mess: "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ" == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)

    if not json_work_new.user_is_registered(user_id):
        if json_work_new.user_in_unregistered_list(user_id):
            if json_work_new.get_user_status_un(user_id) == 'teacher':
                json_work_new.update_last_user_command_un(user_id, message.text)

                user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
                user_markup.row("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ:", reply_markup=user_markup)

            else:
                json_work_new.update_last_user_command_un(user_id, "")
                user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
                user_markup.row("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                bot.send_message(message.from_user.id, "–í—ã —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –≤–≤–µ–ª–∏", reply_markup=user_markup)

        else:
            bot.send_message(message.from_user.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")

    else:
        #–æ–±–Ω—É–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
        bot.send_message(message.from_user.id, "–Ω–µ–ø–æ–Ω–µ–ª")


@bot.message_handler(func=lambda mess: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç ü§ì" == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)

    if not json_work_new.user_is_registered(user_id):
        if not json_work_new.user_in_unregistered_list(user_id):
            dict_of_param = {
                "student_name": message.from_user.first_name, 
                "student_family_name": message.from_user.last_name,
                "name_of_faculty" : "",
                "year_of_study" : "",
                "student_group" : "",
                "status": "–°—Ç—É–¥–µ–Ω—Ç ü§ì",
                "user_status": "student",
                "last_user_command": "",
                "last_bot_msg": ""
            }

            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
            user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
            json_work_new.add_info_about_unregistered_student(dict_of_param, user_id)
            info = json_work_new.get_info_about_unregistered_student(user_id)
            bot.send_message(message.from_user.id, info, reply_markup=user_markup)

        else:
            bot.send_message(message.from_user.id, "–í—ã –Ω–∞—á–∏–Ω–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

    else:
        bot.send_message(message.from_user.id, "–ù–µ –ø–æ–Ω–µ–ª(")


@bot.message_handler(func=lambda mess: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)

    if not json_work_new.user_is_registered(user_id):
        if json_work_new.user_in_unregistered_list(user_id):
            user_status = json_work_new.get_user_status_un(user_id)
            if user_status == "student":
                dict_of_param = json_work_new.get_info_about_unregistered_student_dict(user_id)

            else:
                dict_of_param = json_work_new.get_info_about_unregistered_teacher_dict(user_id)

            if user_status == "student":
                if dict_of_param["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                    if not json_work_new.group_has_headmen(dict_of_param["student_group"]):
                        bot.send_message(message.from_user.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∏–∑ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã —Å—Ç–∞—Ä–æ—Å—Ç–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ")
                        dict_of_param['status'] = '–°—Ç—É–¥–µ–Ω—Ç ü§ì'
                        json_work_new.add_info_about_unregistered_student(dict_of_param, user_id)
                        user_info = json_work_new.get_info_about_unregistered_student(user_id)

                        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
                        user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')

                        if dict_of_param["student_group"] != '':
                            if json_work_new.group_has_headmen(dict_of_param["student_group"]) and dict_of_param['status'] == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                                user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ü§†")

                        if dict_of_param["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                            user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì")

                        if json_work_new.is_valid(dict_of_param):
                            user_markup.row('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                        user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')

                        bot.send_message(message.from_user.id, user_info, reply_markup=user_markup)
                        return


            if json_work_new.is_valid(dict_of_param):
                del dict_of_param["user_status"]
                dict_of_param["last_user_command"] = ''
                dict_of_param["last_bot_msg"] = ''
                dict_of_param["last_id"] = ['', '', '']
                if user_status == "student":
                    dict_of_param["code_of_group"] = json_work_new.get_code_of_group(dict_of_param["name_of_faculty"])

                    json_work_new.remove_unregistered_user(user_id)
                    text = json_work_new.add_new_student(dict_of_param, user_id)

                    bot.send_message(message.from_user.id, text)
                    bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–∞—á–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º‚ò∫Ô∏è\n–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞–¥–µ–µ—Ç—å—Å—è, —á—Ç–æ —É –≤–∞—Å –±—É–¥–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞")
                    bot.send_message(message.from_user.id, "–í –∑–Ω–∞–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –º—ã –¥–∞–µ–º —Ç–µ–±–µ –Ω–∞—à–∏ —Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º, —Ç–∞–∫ –∏ –¥–ª—è —Å–≤–æ–∏—Ö –Ω—É–∂–¥")
                    bot.send_sticker(message.from_user.id, "CAACAgIAAxkBAAMCX5sLPFCziNQRdIwrp9crs6n4yB4AAmwJAAKzkqlINHYOQQw5FBIbBA")
                    
                    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
                    user_markup.row("/help")
                    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥", reply_markup=user_markup)
                else:
                    dict_of_param["chosen_faculty"] = ""
                    json_work_new.remove_unregistered_user(user_id)
                    text = json_work_new.add_new_teacher(dict_of_param, user_id)

                    bot.send_message(message.from_user.id, text)
                    bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–∞—á–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º‚ò∫Ô∏è\n–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞–¥–µ–µ—Ç—å—Å—è, —á—Ç–æ —É –≤–∞—Å –±—É–¥–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞")
                    bot.send_message(message.from_user.id, "–í –∑–Ω–∞–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –º—ã –¥–∞–µ–º —Ç–µ–±–µ –Ω–∞—à–∏ —Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º, —Ç–∞–∫ –∏ –¥–ª—è —Å–≤–æ–∏—Ö –Ω—É–∂–¥")
                    bot.send_sticker(message.from_user.id, "CAACAgIAAxkBAAMCX5sLPFCziNQRdIwrp9crs6n4yB4AAmwJAAKzkqlINHYOQQw5FBIbBA")
                    
                    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
                    user_markup.row("/help")
                    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥", reply_markup=user_markup)


@bot.message_handler(func=lambda mess: "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" == mess.text, content_types=['text'])
def handler_text(message):
    user_id = str(message.from_user.id)

    if json_work_new.user_is_registered(user_id):
        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        user_markup.row("–î–∞, —è —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
        user_markup.row("–ù–µ—Ç, —è –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –Ω–∞–∂–∞–ª —ç—Ç—É –∫–Ω–æ–ø–∫—ÉüôÉ")
        bot.send_message(message.from_user.id, "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å?", reply_markup=user_markup)


@bot.message_handler(func=lambda mess: "–î–∞, —è —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å" == mess.text, content_types=['text'])
def handler_text(message):
    user_id = str(message.from_user.id)

    if json_work_new.user_is_registered(user_id):
        user_status = json_work_new.get_user_status(user_id)

        if user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
            json_work_new.remove_teacher(user_id)
        else:
            json_work_new.remove_student(user_id)

        bot.send_message(message.from_user.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ωüò•")
        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        user_markup.row("/start")
        bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", reply_markup=user_markup)


@bot.message_handler(func=lambda mess: "–ù–µ—Ç, —è –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –Ω–∞–∂–∞–ª —ç—Ç—É –∫–Ω–æ–ø–∫—ÉüôÉ" == mess.text, content_types=['text'])
def handler_text(message):
    user_id = str(message.from_user.id)

    if json_work_new.user_is_registered(user_id):
        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        user_markup.row("/help")
        bot.send_message(message.from_user.id, "–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–æ) –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥", reply_markup=user_markup)


@bot.message_handler(func=lambda mess: '–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ü§†' == mess.text, content_types=['text'])
def handler_text(message):
    user_id = str(message.from_user.id)

    if not json_work_new.user_is_registered(user_id):

        if json_work_new.user_in_unregistered_list(user_id):
            if json_work_new.get_user_status_un(user_id) == 'student':

                dict_of_param = json_work_new.get_info_about_unregistered_student_dict(user_id)
                dict_of_param['status'] = "–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†"

                json_work_new.add_info_about_unregistered_student(dict_of_param, user_id)
                user_info = json_work_new.get_info_about_unregistered_student(user_id)

                user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')

                if dict_of_param["student_group"] != '':
                    if json_work_new.group_has_headmen(dict_of_param["student_group"]) and dict_of_param['status'] == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                        user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ü§†")

                if dict_of_param["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                        user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì")

                if json_work_new.is_valid(dict_of_param):
                    user_markup.row('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')

                bot.send_message(message.from_user.id, user_info, reply_markup=user_markup)


@bot.message_handler(func=lambda mess: '–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì' == mess.text, content_types=['text'])
def handler_text(message):
    user_id = str(message.from_user.id)

    if not json_work_new.user_is_registered(user_id):

        if json_work_new.user_in_unregistered_list(user_id):
            if json_work_new.get_user_status_un(user_id) == 'student':

                dict_of_param = json_work_new.get_info_about_unregistered_student_dict(user_id)
                dict_of_param['status'] = "–°—Ç—É–¥–µ–Ω—Ç ü§ì"

                json_work_new.add_info_about_unregistered_student(dict_of_param, user_id)
                user_info = json_work_new.get_info_about_unregistered_student(user_id)

                user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')

                if dict_of_param["student_group"] != '':
                    if json_work_new.group_has_headmen(dict_of_param["student_group"]) and dict_of_param['status'] == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                        user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ü§†")

                if dict_of_param["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                        user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì")

                if json_work_new.is_valid(dict_of_param):
                    user_markup.row('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')

                bot.send_message(message.from_user.id, user_info, reply_markup=user_markup)


@bot.message_handler(func=lambda mess: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)

    if not json_work_new.user_is_registered(user_id):

        if json_work_new.user_in_unregistered_list(user_id):
            if json_work_new.get_user_status_un(user_id) == 'student':
                user_info = json_work_new.get_info_about_unregistered_student(user_id)
                dict_of_param = json_work_new.get_info_about_unregistered_student_dict(user_id)

                user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')

                if dict_of_param["student_group"] != '':
                    if json_work_new.group_has_headmen(dict_of_param["student_group"]) and dict_of_param['status'] == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                        user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ü§†")

                if dict_of_param["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                        user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì")

                if json_work_new.is_valid(dict_of_param):
                    user_markup.row('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')

                bot.send_message(message.from_user.id, user_info, reply_markup=user_markup)

            else:
                user_info = json_work_new.get_info_about_unregistered_teacher(user_id)
                dict_of_param = json_work_new.get_info_about_unregistered_teacher_dict(user_id)

                user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ')
                if json_work_new.is_valid(dict_of_param):
                    user_markup.row('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                
                bot.send_message(message.from_user.id, user_info, reply_markup=user_markup)

    else:
        '''–û–±–Ω—É–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞'''
        bot.send_message(user_id, "–Ω–µ –ø–æ–Ω–µ–ª")

        
@bot.message_handler(func=lambda mess: '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)

    if not json_work_new.user_is_registered(user_id):
        if json_work_new.user_in_unregistered_list(user_id):
        
            json_work_new.update_last_user_command_un(user_id, message.text)

            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è:", reply_markup=user_markup)

        else:
            bot.send_message(message.from_user.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
            #–≥–æ —Ä–µ–≥–∞—Ç—å—Å—è

    else:
        #–æ–±–Ω—É–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        bot.send_message(message.from_user.id, "–Ω–µ–ø–æ–Ω–µ–ª")
        

@bot.message_handler(func=lambda mess: "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é" == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)
    
    if not json_work_new.user_is_registered(user_id):
        if json_work_new.user_in_unregistered_list(user_id):
        
            json_work_new.update_last_user_command_un(user_id, message.text)

            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:", reply_markup=user_markup)

        else:
            bot.send_message(message.from_user.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç ü§ì')
            user_markup.row('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´')
            bot.send_message(message.from_user.id, "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚ò∫Ô∏è", reply_markup=user_markup)

    else:
        #–æ–±–Ω—É–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        bot.send_message(message.from_user.id, "–Ω–µ–ø–æ–Ω–µ–ª")   
         

@bot.message_handler(func=lambda mess: "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç" == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)

    if json_work_new.user_in_unregistered_list(user_id):
        json_work_new.update_last_user_command_un(user_id, message.text)
        
        faculties = json_work_new.get_list_of_faculties()
        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
        for faculty in faculties:
            user_markup.row(faculty)

        user_markup.row("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', reply_markup=user_markup)

    elif json_work_new.user_is_registered(telegram_id):
        bot.send_message(message.from_user.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')         


@bot.message_handler(func=lambda mess: '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å'== mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)

    if json_work_new.user_in_unregistered_list(user_id):
        
        json_work_new.update_last_user_command_un(user_id, message.text)
        user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

        for course_num in range (1, 7, 2):
            course = str(course_num) + ' –∫—É—Ä—Å'
            course_p = str(course_num + 1) + ' –∫—É—Ä—Å'
            user_markup.row(course, course_p)

        user_markup.row("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:', reply_markup=user_markup)
        
    elif json_work_new.user_is_registered(telegram_id):
        bot.send_message(message.from_user.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')     
        

@bot.message_handler(func=lambda mess: '–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É'== mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)
    if json_work_new.user_in_unregistered_list(user_id):
        dict_of_param = json_work_new.get_info_about_unregistered_student_dict(user_id)
        if dict_of_param['year_of_study'] != '':
            json_work_new.update_last_user_command_un(user_id, message.text)
            groups = json_work_new.get_list_of_group(dict_of_param["name_of_faculty"], dict_of_param["year_of_study"])[1]
            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            for group in groups:
                user_markup.row(group)
            user_markup.row("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', reply_markup=user_markup)
        else:
            bot.send_message(message.from_user.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏ –∫—É—Ä—Å–∞!üò°")

            user_info = json_work_new.get_info_about_unregistered_student(user_id)
            dict_of_param = json_work_new.get_info_about_unregistered_student_dict(user_id)

            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
            user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
            if dict_of_param["student_group"] != '':
                if json_work_new.group_has_headmen(dict_of_param["student_group"]) and dict_of_param['status'] == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                    user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ü§†")

            if dict_of_param["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                        user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì")

            if json_work_new.is_valid(dict_of_param):
                user_markup.row('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
            user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')

            bot.send_message(message.from_user.id, user_info, reply_markup=user_markup)
    elif json_work_new.user_is_registered(telegram_id):
        bot.send_message(message.from_user.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')          
     
        
@bot.message_handler(func=lambda mess: '–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é' == mess.text, content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)

    if not json_work_new.user_is_registered(user_id):
        if json_work_new.user_in_unregistered_list(user_id):
            json_work_new.remove_unregistered_user(user_id)
            bot.send_message(message.from_user.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞üò•")

            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç ü§ì')
            user_markup.row('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´')
            bot.send_message(message.from_user.id, "–î–∞–≤–∞–π –æ–ø—è—Ç—å –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚ò∫Ô∏è", reply_markup=user_markup)
        else:
            bot.send_message(message.from_user.id, "–î–∞ –≤—ã –≤—Ä–æ–¥–µ –∏ –Ω–µ —Ä–µ–≥–∞–ª–∏—Å—å...")

            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç ü§ì')
            user_markup.row('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´')
            bot.send_message(message.from_user.id, "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚ò∫Ô∏è", reply_markup=user_markup)

    else:
        '''–û–±–Ω—É–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–∞–Ω–¥'''
        bot.send_message(message.from_user.id, "–Ω–µ–ø–æ–Ω–µ–ª")

      
@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)

    if json_work_new.user_is_registered(user_id): 
        user_status = json_work_new.get_user_status(user_id)

        if user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
            user_command = json_work_new.get_last_user_command_t(user_id)
            bot_command = json_work_new.get_last_bot_msg_t(user_id)

        else:
            user_command = json_work_new.get_last_user_command_s(user_id)
    
        if user_command =='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' and user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' and bot_command == '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å':
            student_group = message.text
            group_list = json_work_new.get_group_list(student_group)

            bot.send_message(message.from_user.id, group_list) 
            json_work_new.update_chosen_faculty(user_id, student_group)
            json_work_new.update_last_user_command_t(user_id, "")
            json_work_new.update_last_bot_msg_t(user_id, "")
            
            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
            user_markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º')

            
            json_work_new.update_chosen_faculty(user_id, "")

            user_markup.row('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
            bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=user_markup)

        elif user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' and user_command == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º' and bot_command == '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, —Å—É—Ç–¥–µ–Ω—Ç–∞–º –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ':
            student_group = message.text
            json_work_new.update_chosen_faculty(user_id, student_group)
            group_list_id = json_work_new.get_group_list_id(student_group)

            if len(group_list_id):
                json_work_new.update_last_bot_msg_t(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
                user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
                user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')
                bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', reply_markup=user_markup)
                


            else:
                bot.send_message(message.from_user.id, f"–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –∏–∑ –≥—Ä—É–ø–ø—ã {student_group} üòê")

                user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
                user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
                user_markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
                user_markup.row('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
                bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=user_markup)
                json_work_new.update_last_user_command_t(user_id, "")
                json_work_new.update_last_bot_msg_t(user_id, "")
                json_work_new.update_chosen_faculty(user_id, "")

        elif user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' and user_command == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º' and bot_command == '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:':
            teacher_msg = message.text

            student_group = json_work_new.get_chosen_faculty(user_id)
            group_list_id = json_work_new.get_group_list_id(student_group)

            for student_id in group_list_id:
                teacher_initials = json_work_new.get_teacher_name_and_father_name(str(message.from_user.id))
                teachers_msg ='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å ' + teacher_initials + ' –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:\n' + message.text
                keyboard = telebot.types.InlineKeyboardMarkup()
                callback_button = telebot.types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=user_id + ' ' + str(message.message_id))
                keyboard.add(callback_button)
                callback_button = telebot.types.InlineKeyboardButton(text="–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="nothing")
                keyboard.add(callback_button)
                bot.send_message(student_id, teachers_msg, reply_markup=keyboard)

            bot.send_message(message.from_user.id, f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≥—Ä—É–ø–ø—ã {student_group}!")
            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
            user_markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            user_markup.row('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
            bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=user_markup)
            json_work_new.update_last_user_command_t(user_id, "")
            json_work_new.update_last_bot_msg_t(user_id, "")
            json_work_new.update_last_user_id_t(user_id, [])

        elif user_status != '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' and user_command == "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ":
            student_msg = message.text

            student_info = json_work_new.get_info_about_student_dict(user_id)
            teacher_id_info = json_work_new.get_last_user_id_s(user_id)
            text = f"–°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã {student_info['student_group']}, {student_info['student_family_name']} {student_info['student_name']} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n" + student_msg

            if json_work_new.user_is_registered(teacher_id_info[0]):            
                keyboard = telebot.types.InlineKeyboardMarkup()
                callback_button = telebot.types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=user_id + ' ' + str(message.message_id))
                keyboard.add(callback_button)
                callback_button = telebot.types.InlineKeyboardButton(text="–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="nothing")
                keyboard.add(callback_button)
                bot.send_message(int(teacher_id_info[0]), text, reply_markup=keyboard, reply_to_message_id=int(teacher_id_info[3]))
                bot.send_message(message.from_user.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é!")
            else:
                bot.send_message(message.from_user.id, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ãüò•")

            bot.edit_message_text(chat_id=message.from_user.id, message_id=int(teacher_id_info[1]), text=teacher_id_info[2])

            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            if user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã' , '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            else:
                user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
            user_markup.row('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
            bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=user_markup)
            json_work_new.update_last_user_command_s(user_id, "")
            json_work_new.update_last_bot_msg_s(user_id, "")
            json_work_new.update_last_user_id_s(user_id, [])


        elif user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' and user_command == "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ":
            

            teacher_initials = json_work_new.get_teacher_name_and_father_name(str(message.from_user.id))
            teacher_msg = '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å ' + teacher_initials + ' –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n' + message.text
            student_id_info = json_work_new.get_last_user_id_t(user_id)

            if json_work_new.user_is_registered(student_id_info[0]):            
                keyboard = telebot.types.InlineKeyboardMarkup()
                callback_button = telebot.types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=user_id + ' ' + str(message.message_id))
                keyboard.add(callback_button)
                callback_button = telebot.types.InlineKeyboardButton(text="–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="nothing")
                keyboard.add(callback_button)
                bot.send_message(int(student_id_info[0]), teacher_msg, reply_markup=keyboard, reply_to_message_id=int(student_id_info[3]))
                bot.send_message(message.from_user.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É!")
            else:
                bot.send_message(message.from_user.id, "–°—Ç—É–¥–µ–Ω—Ç —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ãüò•")
            bot.edit_message_text(chat_id=message.from_user.id, message_id=int(student_id_info[1]), text=student_id_info[2])

            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
            user_markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            user_markup.row('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')

            bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=user_markup)
            json_work_new.update_last_user_command_t(user_id, "")
            json_work_new.update_last_bot_msg_t(user_id, "")
            json_work_new.update_last_user_id_t(user_id, [])

        elif user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' and user_command == "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞":
            headmen_info = json_work_new.get_info_about_student_dict(user_id)
            student_id_info = json_work_new.get_last_user_id_s(user_id)
            if json_work_new.user_is_registered(student_id_info[0]):
                headmen_msg = '–°—Ç–∞—Ä–æ—Å—Ç–∞ –∏–∑ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n' + message.text
            
                keyboard = telebot.types.InlineKeyboardMarkup()
                callback_button = telebot.types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=user_id + ' ' + str(message.message_id))
                keyboard.add(callback_button)
                callback_button = telebot.types.InlineKeyboardButton(text="–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="nothing")
                keyboard.add(callback_button)
                bot.send_message(int(student_id_info[0]), headmen_msg, reply_markup=keyboard, reply_to_message_id=int(student_id_info[3]))
                bot.send_message(message.from_user.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É!")
            else:
                bot.send_message(message.from_user.id, "–°—Ç—É–¥–µ–Ω—Ç —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ãüò•")

            bot.edit_message_text(chat_id=message.from_user.id, message_id=int(student_id_info[1]), text=student_id_info[2])

            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã' , '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            user_markup.row('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')

            bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=user_markup)
            json_work_new.update_last_user_command_s(user_id, "")
            json_work_new.update_last_bot_msg_s(user_id, "")
            json_work_new.update_last_user_id_s(user_id, [])



        elif user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' and user_command == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º':
            headman_group = json_work_new.get_student_group(user_id)
            group_list_id = json_work_new.get_group_list_id_for_headmen(headman_group)
            headman_text_for_students = "–°—Ç–∞—Ä–æ—Å—Ç–∞ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º:\n" + message.text

            for student_id in group_list_id:
                keyboard = telebot.types.InlineKeyboardMarkup()
                callback_button = telebot.types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data='–°' + user_id + ' ' + str(message.message_id))
                keyboard.add(callback_button)
                callback_button = telebot.types.InlineKeyboardButton(text="–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="nothing")
                keyboard.add(callback_button)
                bot.send_message(student_id, headman_text_for_students, reply_markup=keyboard)
                
            bot.send_message(message.from_user.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã!")

            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã' , '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            user_markup.row('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
            bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=user_markup)

        elif user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì' and user_command == '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ—Å—Ç—ã':
            student_info = json_work_new.get_info_about_student_dict(user_id)
            headmen_id_info = json_work_new.get_last_user_id_s(user_id)
            if json_work_new.user_is_registered(headmen_id_info[0]):
                student_msg = f'–°—Ç—É–¥–µ–Ω—Ç –∏–∑ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã, {student_info["student_family_name"]} {student_info["student_name"]} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n' + message.text
            
                keyboard = telebot.types.InlineKeyboardMarkup()
                callback_button = telebot.types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data='–°' + user_id + ' ' + str(message.message_id))
                keyboard.add(callback_button)
                callback_button = telebot.types.InlineKeyboardButton(text="–ù–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="nothing")
                keyboard.add(callback_button)
                bot.send_message(int(headmen_id_info[0]), student_msg, reply_markup=keyboard, reply_to_message_id=int(headmen_id_info[3]))
                bot.send_message(message.from_user.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ—Å—Ç–µ!")
            else:
                bot.send_message(message.from_user.id, "–°—Ç–∞—Ä–æ—Å—Ç–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ãüò•")

            bot.edit_message_text(chat_id=message.from_user.id, message_id=int(headmen_id_info[1]), text=headmen_id_info[2])

            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
            user_markup.row('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
            user_markup.row('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')

            bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=user_markup)
            json_work_new.update_last_user_command_s(user_id, "")
            json_work_new.update_last_bot_msg_s(user_id, "")
            json_work_new.update_last_user_id_s(user_id, [])

        else:
            bot.send_message(message.from_user.id, '–Ω–µ –ø–æ–Ω—è–≤')

    else:

        if json_work_new.user_in_unregistered_list(user_id):

            if json_work_new.get_last_user_command_un(user_id) == '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è':
                name = message.text
                user_status = json_work_new.get_user_status_un(user_id)
                if user_status == 'student':
                    dict_of_param = json_work_new.get_info_about_unregistered_student_dict(user_id)
                else:
                    dict_of_param = json_work_new.get_info_about_unregistered_teacher_dict(user_id)
                if name.isalpha() == False or len(name) > 16:
                    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
                    user_markup.row("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                    bot.send_message(message.from_user.id, '–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã!', reply_markup=user_markup)

                    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è:")

                elif user_status == 'student' and name.isalpha() == True and len(name)<=15:
                    name = name.capitalize()
                    dict_of_param["student_name"] = name
                    json_work_new.add_info_about_unregistered_student(dict_of_param, user_id)
                    user_info = json_work_new.get_info_about_unregistered_student(user_id)
                    bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
                    bot.send_message(message.from_user.id, user_info)
                elif len(name)<=15:
                    name = name.capitalize()
                    dict_of_param["teacher_name"] = name
                    json_work_new.add_info_about_unregistered_teacher(dict_of_param, user_id)
                    user_info = json_work_new.get_info_about_unregistered_teacher(user_id)


                    bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
                    bot.send_message(message.from_user.id, user_info)

                user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

                if user_status == 'student':
                    user_info = json_work_new.get_info_about_unregistered_student(user_id)

                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
                    if dict_of_param["student_group"] != '':
                        if json_work_new.group_has_headmen(dict_of_param["student_group"]) and dict_of_param['status'] == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                            user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ü§†")

                    if dict_of_param["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                        user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì")

                    if json_work_new.is_valid(dict_of_param):
                        user_markup.row('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                    user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')

                else:
                    user_info = json_work_new.get_info_about_unregistered_teacher(user_id)

                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ')
                    if json_work_new.is_valid(dict_of_param):
                        user_markup.row('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                    user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')

                bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=user_markup) 
                #–û–±–Ω—É–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞!               
            elif json_work_new.get_last_user_command_un(user_id) == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é":
                name = message.text
                user_status = json_work_new.get_user_status_un(user_id)
                if user_status == 'student':
                    dict_of_param = json_work_new.get_info_about_unregistered_student_dict(user_id)
                else:
                    dict_of_param = json_work_new.get_info_about_unregistered_teacher_dict(user_id)

                if name.isalpha() == False or len(name)>15:
                    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
                    user_markup.row("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                    bot.send_message(message.from_user.id, '–í–≤–µ–¥–µ–Ω–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã!', reply_markup=user_markup)

                    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:")         

                elif user_status == 'student' and name.isalpha() == True and len(name)<=15:
                    name = name.capitalize()
                    dict_of_param["student_family_name"] = name
                    json_work_new.add_info_about_unregistered_student(dict_of_param, user_id)
                    user_info = json_work_new.get_info_about_unregistered_student(user_id)
                    bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
                    bot.send_message(message.from_user.id, user_info)

                else:
                    name = name.capitalize()
                    dict_of_param["teacher_family_name"] = name
                    json_work_new.add_info_about_unregistered_teacher(dict_of_param, user_id)
                    user_info = json_work_new.get_info_about_unregistered_teacher(user_id)


                    bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
                    bot.send_message(message.from_user.id, user_info)

                user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

                if user_status == 'student':
                    user_info = json_work_new.get_info_about_unregistered_student(user_id)

                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')

                    if dict_of_param["student_group"] != '':
                        if json_work_new.group_has_headmen(dict_of_param["student_group"]) and dict_of_param['status'] == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                            user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ü§†")

                    if dict_of_param["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                        user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì")

                    if json_work_new.is_valid(dict_of_param):
                        user_markup.row('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                    user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')

                else:
                    user_info = json_work_new.get_info_about_unregistered_teacher(user_id)

                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                    user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ')
                    if json_work_new.is_valid(dict_of_param):
                        user_markup.row('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                    user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')

                bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=user_markup) 
                
                #–û–±–Ω—É–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
            elif json_work_new.get_last_user_command_un(user_id) == "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ":
                name = message.text
                user_status = json_work_new.get_user_status_un(user_id)
                dict_of_param = json_work_new.get_info_about_unregistered_teacher_dict(user_id)
                    
                if name.isalpha() == False or len(name)>15:
                    
                    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
                    user_markup.row("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                    bot.send_message(message.from_user.id, '–û—Ç—á–µ—Å—Ç–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã!', reply_markup=user_markup)

                    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ:")

                if name.isalpha() == True and len(name)<=15:
                    name = name.capitalize()
                    dict_of_param["teacher_father_name"] = name
                    json_work_new.add_info_about_unregistered_teacher(dict_of_param, user_id)
                    user_info = json_work_new.get_info_about_unregistered_teacher(user_id)


                    bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
                    bot.send_message(message.from_user.id, user_info)

                user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

                user_info = json_work_new.get_info_about_unregistered_teacher(user_id)

                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ')
                if json_work_new.is_valid(dict_of_param):
                    user_markup.row('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                    user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')

                bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=user_markup) 
                
                #–û–±–Ω—É–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞

            elif json_work_new.get_last_user_command_un(user_id) == "–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É": 
                dict_of_param = json_work_new.get_info_about_unregistered_student_dict(user_id)
                if dict_of_param["name_of_faculty"] != '' and dict_of_param["year_of_study"] != '':
                    if message.text in json_work_new.get_list_of_group(dict_of_param["name_of_faculty"],dict_of_param["year_of_study"])[1]:
                        dict_of_param["student_group"] = message.text
                        json_work_new.add_info_about_unregistered_student(dict_of_param, user_id)
                        bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞")
                else:
                    bot.send_message(message.from_user.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏ –∫—É—Ä—Å–∞!üò°")
                    
                user_info = json_work_new.get_info_about_unregistered_student(user_id)
                bot.send_message(message.from_user.id, user_info)
                                        
                user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
                user_markup.row('–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
                if dict_of_param["student_group"] != '':
                    if json_work_new.group_has_headmen(dict_of_param["student_group"])  and dict_of_param['status'] == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                        user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ü§†")

                if dict_of_param["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                    user_markup.row("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì")

                if json_work_new.is_valid(dict_of_param):
                    user_markup.row('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                user_markup.row('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=user_markup)
            else:
                bot.send_message(user_id, "–ù–µ –ø–æ–Ω—è–ª(")
                '''–û–±–Ω—É–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞'''

        else:
            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç ü§ì')
            user_markup.row('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´')
            bot.send_message(message.from_user.id, "–Ø –Ω–µ –ø–æ–Ω—è–ª —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª\n–¢–∞–∫ —á—Ç–æ –≥–æ —Ä–µ–≥–∞—Ç—å—Å—è:)", reply_markup=user_markup)

'''@bot.message_handler(content_types=['stiker'])
def handler_sticker(message)'''

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    user_id = str(call.from_user.id)

    if call.message:
        if call.data != "nothing":
            user_status = json_work_new.get_user_status(user_id)
            user_and_message_id = call.data.split()
            if user_status != '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
            
                if call.data[0][0] == '–°': # –° - –Ω–∞ —Ä—É—Å—Å–∫–æ–º!!!!!

                    if user_status == "–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†":
                        json_work_new.update_last_user_command_s(user_id, "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞")
                    else:
                        json_work_new.update_last_user_command_s(user_id, "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ—Å—Ç—ã")
                    json_work_new.update_last_user_id_s(user_id, [user_and_message_id[0][1:], call.message.message_id, call.message.text, user_and_message_id[1]])
                else:


                    json_work_new.update_last_user_command_s(user_id, "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    json_work_new.update_last_user_id_s(user_id, [user_and_message_id[0], call.message.message_id, call.message.text, user_and_message_id[1]])

            else:
                json_work_new.update_last_user_command_t(user_id, "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                json_work_new.update_last_user_id_t(user_id, [user_and_message_id[0], call.message.message_id, call.message.text, user_and_message_id[1]])
            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row("–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
            bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=user_markup)
        else:
            bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=call.message.text)



def notify(faculty_code, year_of_study, date):
    students = {}
    if not year_of_study:
        students.update(json_work_new.find_students({'code_of_group': faculty_code}))
    else:
        students.update(json_work_new.find_students({'code_of_group': faculty_code, 'year_of_study': year_of_study}))

    print(students, {'code_of_group': faculty_code, 'year_of_study': year_of_study})

    for telegram_id, data in students.items():
        curriculum = json_work_new.get_timetable(telegram_id, date=date)
        bot.send_message(telegram_id, f"üëÄ –ò–∑–º–µ–Ω–∏–ª–æ—Å—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date}: {curriculum}")

scheduler_parser.notify_callback = notify


if __name__ == '__main__':
    bot.polling()