import json
import datetime as dt


''' 
    –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    
    get_info_about_student()
    update_last_user_command()
    update_last_bot_msg()
    get_last_user_command()
    get_last_bot_msg()
    get_group_list()
    read_student_file()
    read_timetable_file()
    check_user()
    add_new_user()
    get_timetable()

'''


'''def get_group_list_id(student_grop)
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    return None
'''


def get_info_about_student(telegram_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ'''
    list_of_students = read()["list_of_students"]
    los = list_of_students["telegram_id"]
    
    info = f'''\t–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ:
    –ò–º—è: {los["sudent_name"]}
    –§–∞–º–∏–ª–∏—è: {los["sutdent_family_name"]}
    –§–∞–∫—É–ª—å—Ç–µ—Ç: {los["name_of_faculty"]}
    –ö—É—Ä—Å: {los["year_of_study"]}
    –ì—Ä—É–ø–ø–∞: {los["student_group"]}
    –°—Ç–∞—Ç—É—Å: {los["status"]}
    –ó–≤–∞–Ω–∏–µ: {los["rank"]}'''
    
    return info


def update_last_user_command(telegram_id, command):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –≤–≤–æ–¥–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'''
    file_work = read()
    file_work["list_of_students"][telegram_id]["last_user_command"] = command

    with open("json_work_file.json", "w", encoding="utf-8") as f_write:
            json.dump(file_work, f_write)
    
    return


def update_last_bot_msg(telegram_id, msg):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –±–æ—Ç'''
    file_work = read()
    file_work["list_of_students"][telegram_id]["last_bot_msg"] = msg

    with open("json_work_file.json", "w", encoding="utf-8") as f_write:
            json.dump(file_work, f_write)
    
    return


def get_last_user_command(telegram_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –≤–≤–æ–¥–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'''
    student_info = read()["list_of_students"][telegram_id]
    
    return student_info["last_user_command"]


def get_last_bot_msg(telegram_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –±–æ—Ç'''
    student_info = read()["list_of_students"][telegram_id]
    
    return student_info["last_bot_msg"]


def get_group_list(student_group):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã'''
    list_of_students = read()["list_of_students"]
    list_of_students_in_group_str = ""
    num_of_student = 1

    for student_telegram_id in list_of_students.keys():
        student_info = list_of_students[student_telegram_id]
        if student_info["student_group"] == student_group:
            list_of_students_in_group_str += f"\n{num_of_student}. {student_info['student_name']} {student_info['sutdent_family_name']}"
            if student_info["status"] == "–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†":
                list_of_students_in_group_str += " - ü§†"
    
    if len(list_of_students_in_group_str):
        list_of_students_in_group_str = f"\t–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã {student_group}:" + list_of_students_in_group_str
    else:
        list_of_students_in_group_str = f"–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –∏–∑ –≥—Ä—É–ø–ø—ã {student_group} üòê"



def read_students_file():
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ '''
    with open("json_work_file.json", "r", encoding="utf-8") as f_read:
        text = json.load(f_read)
    return text


def read_timetable_file(code_of_group):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω—è –±–∞–∑—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π'''
    with open(f"../parser_timetable/{code_of_group}-d.json", "r", encoding="utf-8") as f_read:
        text = json.load(f_read)
    return text


def check_user(telegram_id):
    '''–§—É–∫–Ω—Ü–∏—è –¥–ª—è –ø—Ä–æ–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ'''
    list_of_students = read_students_file()["list_of_students"]
    if telegram_id in list_of_students:
        return {"status_value" : False, "status_msg" : "–¢–∞–∫–æ–π —Å—Ç—É–¥–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—åüò°!", "student_info" : student_info}
    else:
        return {"status_value" : True, "status_msg" : "–û—Ç–ª–∏—á–Ω–æüòÉ! –ú—ã –≤–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –±–∞–∑—É üñ•!", "student_info" : student_info}


def add_new_user(dict_of_param, telegram_id):
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ'''
    result = check_user(telegram_id)
    if result["staus_value"]:
        list_of_students = read_students_file()
        list_of_students["list_of_students"].append(dict_of_param)
        with open("json_work_file.json", "w", encoding="utf-8") as f_write:
            json.dump(f_dict, f_write)
    return result["status_msg"]


def get_timetable(telegram_id, user_weekday):
    '''–§—É–∫–Ω—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å'''
    result = check_user(telegram_id)
    if not result["status_value"]:
        '''–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ç—ã –¥–Ω—è, –∫–æ—Ç–æ—Ä—ã–π –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'''
        today_d = dt.datetime.date(dt.datetime.now())
        weekday_now = today_d.isoweekday()
        diff = user_weekday - weekday_now
        diff = dt.timedelta(days = diff)
        user_date = today_d + diff
        user_date_str = user_date.strftime("%d.%m.%Y")
        '''–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ'''
        tt_file = read_timetable_file(result["student_info"]["code_of_group"])
        timetable_str = ""

        #user_date_str = "25.09.2020"
        if user_date_str in tt_file.keys():
            for lesson in range(4):
                name_of_lesson = tt_file[user_date_str][result[2]["year_of_study"]][lesson][0]
                audience_and_teacher = tt_file[user_date_str][result[2]["year_of_study"]][lesson][1]
                if len(name_of_lesson):
                    timetable_str += f"\n–ü–∞—Ä–∞ –Ω–æ–º–µ—Ä {lesson + 1}: {name_of_lesson}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—è: {audience_and_teacher};"
        else:
            return "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –¥–ª—è —Ç–µ–±—è –Ω–µ —Å–æ—Å—Ç–∞–≤–∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µü•∫("
        if len(timetable_str):
            return timetable_str
        else:
            return "–í —ç—Ç–æ—Ç –¥–µ–Ω—å —É —Ç–µ–±—è –Ω–µ—Ç –ø–∞—ÄüôÇ. –ú–æ–∂–µ—à—å –ø–æ—Å–ø–∞—Ç—å –ø–æ–¥–æ–ª—å—à–µ) üò¥"

    else:
        return result["status_msg"]


'''def write():
    with open("json_work_file.json", "w", encoding="utf-8") as f_write:
        pass'''


'''if __name__ == "__main__": 
   print(get_timetable("251538190", 3))'''
