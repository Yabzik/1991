#import telebot
#from telebot import types
import aiogram
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
import logging
import time
import datetime
import urllib.request, json 
import json_work_new
import config
import scheduler_parser
import random
import string
#message.text
#message.chat.id
logging.basicConfig(level=logging.INFO)
bot = aiogram.Bot('1047628795:AAHR8i8R8Nri4nVmcAyOZTackPe3jvnPk3c')
#bot = telebot.TeleBot('1047628795:AAHR8i8R8Nri4nVmcAyOZTackPe3jvnPk3c')

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

'''@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    #user_id = str(message.from_user.id)
    user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    user_markup.add('help')
    
    #await message.reply("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",  reply_markup=user_markup)   
    await message.reply( message.chat.first_name,  reply_markup=user_markup)  
    #await message.reply("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")  '''
    
@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    user_id = str(message.chat.id)

    if json_work_new.user_is_registered(user_id):
        #user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        #user_markup.add('/help')
        await message.reply("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

    else:
        user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        user_markup.add('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç ü§ì')
        user_markup.add('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´')
        await message.reply(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.chat.first_name}! üòÉ\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µüë®‚Äçüíªüë©‚Äçüíª", reply_markup=user_markup) 

@dp.message_handler(commands='help')
async def cmd_start(message: types.Message):
    user_id = str(message.chat.id)

    if json_work_new.user_is_registered(user_id):   
        user_status = json_work_new.get_user_status(user_id) 

        user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

        if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì' :
            user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
            json_work_new.update_last_user_command_s(user_id, message.text)

        elif user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' :
            user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
            user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            json_work_new.update_last_user_command_s(user_id, message.text)

        elif user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' :
            user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
            user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            json_work_new.update_last_user_command_t(user_id, message.text)

        user_markup.add('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
        user_markup.add('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=user_markup)

    else:
        if json_work_new.user_in_unregistered_list(user_id):
            if json_work_new.get_user_status_un(user_id) == 'student':
                user_info = json_work_new.get_info_about_unregistered_student(user_id)
                dict_of_param = json_work_new.get_info_about_unregistered_student_dict(user_id)

                user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

                user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
                user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')

                if dict_of_param["student_group"] != '':
                    if json_work_new.group_has_headmen(dict_of_param["student_group"]) and dict_of_param['status'] == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                        user_markup.add("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ü§†")

                if dict_of_param["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                        user_markup.add("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì")

                if json_work_new.is_valid(dict_of_param):
                    user_markup.add('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                    
                user_markup.add('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
                user_markup.add('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')

                await message.reply(user_info, reply_markup=user_markup)

            else:
                user_info = json_work_new.get_info_about_unregistered_teacher(user_id)
                dict_of_param = json_work_new.get_info_about_unregistered_teacher_dict(user_id)

                user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

                user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ')
                if json_work_new.is_valid(dict_of_param):
                    user_markup.add('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                    
                user_markup.add('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
                user_markup.add('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                
                await message.reply(user_info, reply_markup=user_markup)
        else:
            user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            user_markup.add('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç ü§ì')
            user_markup.add('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´')
            await message.reply( "–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ! –î–∞–≤–∞–π—Ç–µ —Ä–µ–≥–∞—Ç—å—Å—è:)", reply_markup=user_markup) 
            

@dp.message_handler(lambda message: message.text== '–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')
async def cmd_start(message: types.Message):
    user_id = str(message.chat.id)
    user_status = json_work_new.get_user_status(user_id)

    user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì' :
        user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
        json_work_new.update_last_user_command_s(user_id, message.text)

    elif user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' :
        user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
        user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        json_work_new.update_last_user_command_s(user_id, message.text)

    elif user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' :
        user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
        user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        json_work_new.update_last_user_command_t(user_id, "")
        json_work_new.update_last_bot_msg_t(user_id, "")
        json_work_new.update_teacher_msg(user_id, "")
        json_work_new.update_chosen_faculty(user_id, "")
        json_work_new.update_answer_t(user_id, "")
    user_markup.add('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
    user_markup.add('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=user_markup)


@dp.message_handler(lambda message: message.text== '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
async def cmd_start(message: types.Message):
        user_id = str(message.chat.id) 
        user_status = json_work_new.get_user_status(user_id)

        if user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' :
            #if last_command == 
            json_work_new.update_last_user_command_s(user_id, message.text)
            user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            user_markup.add('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')
            await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', reply_markup=user_markup)

        else:
            if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                json_work_new.update_last_user_command_s(user_id, "")

            elif user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
                json_work_new.update_last_user_command_t(user_id, "")

            await message.reply("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
            
            
@dp.message_handler(lambda message: message.text== '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
async def cmd_start(message: types.Message):
    user_id = str(message.chat.id)
    if json_work_new.user_is_registered(user_id):
        user_status = json_work_new.get_user_status(user_id)
        if user_status != '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
            json_work_new.update_last_user_command_s(user_id, '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
        else:
            json_work_new.update_last_user_command_t(user_id, '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:")
    else:
        json_work_new.update_last_user_command_un(user_id, '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:")
        
        
@dp.message_handler(lambda message: message.text== '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' )
async def cmd_start(message: types.Message):
    user_id = str(message.chat.id)
    user_status = json_work_new.get_user_status(user_id)

    if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì' or user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
        json_work_new.update_last_user_command_s(user_id, message.text)

        user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        user_markup.add('1. –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '2. –í—Ç–æ—Ä–Ω–∏–∫')
        user_markup.add('3. –°—Ä–µ–¥–∞', '4. –ß–µ—Ç–≤–µ—Ä–≥')
        user_markup.add('5. –ü—è—Ç–Ω–∏—Ü–∞', '6. –°—É–±–±–æ—Ç–∞')
        user_markup.add('7. –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
        user_markup.add('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')

        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:', reply_markup=user_markup)
    else:
        json_work_new.update_last_user_command_t(user_id, "")
        await message.reply('–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')
        
        
@dp.message_handler(lambda message: message.text== '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã' )
async def cmd_start(message: types.Message):
    user_id = str(message.chat.id)   
    user_status = json_work_new.get_user_status(user_id)

    if user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' or user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
        student_group = json_work_new.get_student_group(user_id)
        group_list = json_work_new.get_group_list(student_group)
        await message.reply(group_list)

        user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
            user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
        else:
            user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã' ) 
            user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        user_markup.add('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
        user_markup.add('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=user_markup)

    else:
        if user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
            json_work_new.update_last_user_command_t(user_id, "")

        await message.reply("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")


@dp.message_handler(lambda message: message.text == '–û—Å—Ç–∞–≤–∏—Ç—å —ç—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä–æ—Å—Ç–µ' or message.text == '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' or message.text == "–î–∞, —Å—Ç—É–¥–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å" or message.text == "–ù–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ —Å–º–æ–≥—É—Ç –æ–≤—Ç–µ—Ç–∏—Ç—å" )
async def cmd_start(message: types.Message):
    user_id = str(message.chat.id)   
    user_status = json_work_new.get_user_status(user_id)
    
    if user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
        if message.text == '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤':
            json_work_new.update_last_user_command_t(user_id, message.text)
        else:
            json_work_new.update_answer_t(user_id, message.text)
        
        user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        for i in json_work_new.get_list_of_faculties():
            user_markup.add(i)
        user_markup.add('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')
        await message.reply( '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', reply_markup=user_markup)

    else:
        json_work_new.update_last_user_command_s(user_id, "")
        await message.reply( "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
       
       
@dp.message_handler(lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º" or message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å—Ç—É–¥–µ–Ω—Ç–∞–º")
async def cmd_start(message: types.Message):
    user_id = str(message.chat.id)      
    user_status = json_work_new.get_user_status(user_id)
    
    if user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
        json_work_new.update_last_user_command_t(user_id, message.text)
        
        user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        user_markup.add("–î–∞, —Å—Ç—É–¥–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å")
        user_markup.add("–ù–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ —Å–º–æ–≥—É—Ç –æ–≤—Ç–µ—Ç–∏—Ç—å")
        user_markup.add('–û—Å—Ç–∞–≤–∏—Ç—å —ç—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä–æ—Å—Ç–µ')
        user_markup.add('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')
        await message.reply('–°—Ç—É–¥–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=user_markup)

    else:
        json_work_new.update_last_user_command_s(user_id, "")
        await message.reply( "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
        
        
@dp.message_handler(lambda message: message.text in json_work_new.get_list_of_faculties())
async def cmd_start(message: types.Message):
    user_id = str(message.chat.id)  
    
    if json_work_new.user_is_registered(user_id): 
        user_status = json_work_new.get_user_status(user_id)
        if user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
            #json_work_new.update_last_user_command_t(user_id, message.text)
            json_work_new.update_chosen_faculty(user_id, message.text)

            user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

            for course_num in range (1, 7, 2):
                course = str(course_num) + ' –∫—É—Ä—Å'
                course_p = str(course_num + 1) + ' –∫—É—Ä—Å'
                user_markup.add(course, course_p)

            user_markup.add("–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
            
            await message.reply(  '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:', reply_markup=user_markup)

        else:
            json_work_new.update_last_user_command_s(user_id, "")
            await message.reply("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
            
    elif json_work_new.user_in_unregistered_list(user_id):
        if json_work_new.get_last_user_command_un(user_id) == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç":
            dict_of_param = json_work_new.get_info_about_unregistered_student_dict(user_id)
            user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            if message.text in json_work_new.get_list_of_faculties():
                dict_of_param["name_of_faculty"] = message.text
                dict_of_param["student_group"] = ''
                dict_of_param["year_of_study"] = ''
                await message.reply("–û—Ç–ª–∏—á–Ω–æ! –í–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –≤—ã —Ä–∞–Ω–µ–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –ø–æ–ª—è –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫—É—Ä—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö –∑–∞–Ω–æ–≤–æ")
                json_work_new.add_info_about_unregistered_student(dict_of_param, user_id)
            user_info = json_work_new.get_info_about_unregistered_student(user_id)
            await message.reply(user_info)
                
            user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
            user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
            user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
            if dict_of_param["student_group"] != '':
                if json_work_new.group_has_headmen(dict_of_param["student_group"]) and dict_of_param['status'] == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                    user_markup.add("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ü§†")

            if dict_of_param["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                        user_markup.add("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì")

            if json_work_new.is_valid(dict_of_param):
                    user_markup.add('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
            user_markup.add('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
            user_markup.add('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
            await message.reply( "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=user_markup)
           

@dp.message_handler(lambda message: message.text == '1 –∫—É—Ä—Å' or message.text == '2 –∫—É—Ä—Å' or message.text == '3 –∫—É—Ä—Å' or message.text == '4 –∫—É—Ä—Å' or message.text == '5 –∫—É—Ä—Å' or message.text == '6 –∫—É—Ä—Å')
async def cmd_start(message: types.Message):     
    user_id = str(message.chat.id)  

    if json_work_new.user_is_registered(user_id): 
        user_status= json_work_new.get_user_status(user_id)
        year_of_study = message.text[0]
        
        if user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
            #json_work_new.update_last_user_command_t(user_id, "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            faculty = json_work_new.get_chosen_faculty(user_id)
            json_work_new.update_chosen_faculty(user_id, "")
            list_of_groups_text, list_of_groups = json_work_new.get_list_of_group(faculty, year_of_study)
            await message.reply(list_of_groups_text)
            last_teacher_command = json_work_new.get_last_user_command_t(user_id)

            user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

            if len(list_of_groups):
                for name_of_group in list_of_groups:
                    user_markup.add(name_of_group)          
                
                user_markup.add('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')

                if last_teacher_command == '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤':
                    bot_msg = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å'
                elif last_teacher_command == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º':
                    bot_msg = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, —Å—É—Ç–¥–µ–Ω—Ç–∞–º –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                elif last_teacher_command == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å—Ç—É–¥–µ–Ω—Ç–∞–º':
                    bot_msg = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, —Å—É—Ç–¥–µ–Ω—Ç–∞–º –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª"

                await message.reply(bot_msg, reply_markup=user_markup)
                json_work_new.update_last_bot_msg_t(user_id, bot_msg)

            else:
                user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
                user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
                user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
                user_markup.add('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
                user_markup.add('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
                await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=user_markup)

        else:
            json_work_new.update_last_user_command_s(user_id, "")
            await message.reply("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")

    elif json_work_new.user_in_unregistered_list(user_id):
        if json_work_new.get_last_user_command_un(user_id) == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å":   
            dict_of_param = json_work_new.get_info_about_unregistered_student_dict(user_id)
            if dict_of_param["name_of_faculty"] != '':
                dict_of_param["year_of_study"] = message.text[0]
                dict_of_param["student_group"] = ''
                await message.reply("–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∫—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –≤—ã —Ä–∞–Ω–µ–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –ø–æ–ª—è –≥—Ä—É–ø–ø–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—ë –∑–∞–Ω–æ–≤–æ")
                json_work_new.add_info_about_unregistered_student(dict_of_param, user_id)
                user_info = json_work_new.get_info_about_unregistered_student(user_id)
                await message.reply(user_info)

            
            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
            user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
            user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')

            if dict_of_param["student_group"] != '':
                if json_work_new.group_has_headmen(dict_of_param["student_group"]) and dict_of_param['status'] == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                    user_markup.add("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ü§†")

            if dict_of_param["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                user_markup.add("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì")

            if json_work_new.is_valid(dict_of_param):
                    user_markup.add('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
            user_markup.add('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
            user_markup.add('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
            await message.reply(reply_markup=user_markup)

        else:
            print("hello")
     
     
@dp.message_handler(lambda message: message.text == '1. –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' or message.text == '2. –í—Ç–æ—Ä–Ω–∏–∫' or message.text == '3. –°—Ä–µ–¥–∞' or message.text == '4. –ß–µ—Ç–≤–µ—Ä–≥' or message.text == '5. –ü—è—Ç–Ω–∏—Ü–∞' or message.text == '6. –°—É–±–±–æ—Ç–∞' or message.text == '7. –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
async def cmd_start(message: types.Message): 
    user_id = str(message.chat.id)  
    user_status = json_work_new.get_user_status(user_id)

    if user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' or user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
        day = message.text[0]
        timetable = json_work_new.get_timetable(user_id, user_weekday=int(day))
        bot.send_message(user_id, timetable)

        user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        
        if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
            user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')

        else:
            user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
            user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')

        user_markup.add('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
        user_markup.add('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=user_markup)
    
    else:
        json_work_new.update_last_user_command_t(user_id, "")
        await message.reply("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
    

@dp.message_handler(lambda message: message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´')
async def cmd_start(message: types.Message): 
    user_id = str(message.chat.id)

    if not json_work_new.user_is_registered(user_id):
        if not json_work_new.user_in_unregistered_list(user_id):
            dict_of_param = {
                "teacher_name": message.from_user.first_name,
                "teacher_family_name": message.from_user.last_name,
                "teacher_father_name": "",
                "user_status": "teacher",
                "last_user_command": "",
                "last_bot_msg": ""
            }

            user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

            user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
            user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ')
            user_markup.add('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
            user_markup.add('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')

            json_work_new.add_info_about_unregistered_student(dict_of_param, user_id)
            info = json_work_new.get_info_about_unregistered_teacher(user_id)
            await message.reply(info, reply_markup=user_markup)

        else:
            await message.reply("–í—ã —É–∂–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            if json_work_new.get_user_status_un(user_id) == 'student':
                user_info = json_work_new.get_info_about_unregistered_student(user_id)
                dict_of_param = json_work_new.get_info_about_unregistered_student_dict(user_id)

                user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

                user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
                user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')

                if dict_of_param["student_group"] != '':
                    if json_work_new.group_has_headmen(dict_of_param["student_group"]) and dict_of_param['status'] == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                        user_markup.add("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ü§†")

                if dict_of_param["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                        user_markup.add("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì")

                if json_work_new.is_valid(dict_of_param):
                    user_markup.add('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                user_markup.add('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
                user_markup.add('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')

                await message.reply(user_info, reply_markup=user_markup)

            else:
                user_info = json_work_new.get_info_about_unregistered_teacher(user_id)
                dict_of_param = json_work_new.get_info_about_unregistered_teacher_dict(user_id)

                user_markup = telebot.types.ReplyKeyboardMarkup(True, False)

                user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ')
                if json_work_new.is_valid(dict_of_param):
                    user_markup.add('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                user_markup.add('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
                user_markup.add('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                
                await message.reply(user_info, reply_markup=user_markup)

    else:
        await message.reply("–Ω–µ–ø–æ–Ω–µ–ª")
        #–û–±–Ω—É–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ 
        
#513

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)