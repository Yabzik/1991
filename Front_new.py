#import telebot
#from telebot import types
import aiogram
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
import logging
import time
import datetime
import urllib.request, json 
import json_work_new
import config
import scheduler_parser
import random
import string
#message.text
#message.chat.id
logging.basicConfig(level=logging.INFO)
bot = aiogram.Bot('1047628795:AAHR8i8R8Nri4nVmcAyOZTackPe3jvnPk3c')
#bot = telebot.TeleBot('1047628795:AAHR8i8R8Nri4nVmcAyOZTackPe3jvnPk3c')

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

'''@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    #user_id = str(message.from_user.id)
    user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    user_markup.add('help')
    
    #await message.reply("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",  reply_markup=user_markup)   
    await message.reply( message.chat.first_name,  reply_markup=user_markup)  
    #await message.reply("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")  '''
    
@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    user_id = str(message.chat.id)

    if json_work_new.user_is_registered(user_id):
        #user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        #user_markup.add('/help')
        await message.reply("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

    else:
        user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        user_markup.add('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç ü§ì')
        user_markup.add('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´')
        await message.reply(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.chat.first_name}! üòÉ\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µüë®‚Äçüíªüë©‚Äçüíª", reply_markup=user_markup) 

@dp.message_handler(commands='help')
async def cmd_start(message: types.Message):
    user_id = str(message.chat.id)

    if json_work_new.user_is_registered(user_id):   
        user_status = json_work_new.get_user_status(user_id) 

        user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

        if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì' :
            user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
            json_work_new.update_last_user_command_s(user_id, message.text)

        elif user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' :
            user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
            user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            json_work_new.update_last_user_command_s(user_id, message.text)

        elif user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' :
            user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
            user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
            json_work_new.update_last_user_command_t(user_id, message.text)

        user_markup.add('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
        user_markup.add('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=user_markup)

    else:
        if json_work_new.user_in_unregistered_list(user_id):
            if json_work_new.get_user_status_un(user_id) == 'student':
                user_info = json_work_new.get_info_about_unregistered_student(user_id)
                dict_of_param = json_work_new.get_info_about_unregistered_student_dict(user_id)

                user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

                user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', '–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å')
                user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')

                if dict_of_param["student_group"] != '':
                    if json_work_new.group_has_headmen(dict_of_param["student_group"]) and dict_of_param['status'] == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                        user_markup.add("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç–∞—Ä–æ—Å—Ç–æ–π ü§†")

                if dict_of_param["status"] == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†':
                        user_markup.add("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º ü§ì")

                if json_work_new.is_valid(dict_of_param):
                    user_markup.add('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                    
                user_markup.add('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
                user_markup.add('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')

                await message.reply(user_info, reply_markup=user_markup)

            else:
                user_info = json_work_new.get_info_about_unregistered_teacher(user_id)
                dict_of_param = json_work_new.get_info_about_unregistered_teacher_dict(user_id)

                user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

                user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
                user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ')
                if json_work_new.is_valid(dict_of_param):
                    user_markup.add('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                    
                user_markup.add('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
                user_markup.add('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
                
                await message.reply(user_info, reply_markup=user_markup)
        else:
            user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            user_markup.add('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç ü§ì')
            user_markup.add('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´')
            await message.reply( "–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ! –î–∞–≤–∞–π—Ç–µ —Ä–µ–≥–∞—Ç—å—Å—è:)", reply_markup=user_markup) 
            

@dp.message_handler(lambda message: message.text== '–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')
async def cmd_start(message: types.Message):
    user_id = str(message.chat.id)
    user_status = json_work_new.get_user_status(user_id)

    user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì' :
        user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
        json_work_new.update_last_user_command_s(user_id, message.text)

    elif user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' :
        user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã')
        user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        user_markup.add('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        json_work_new.update_last_user_command_s(user_id, message.text)

    elif user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´' :
        user_markup.add('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
        user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        user_markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
        json_work_new.update_last_user_command_t(user_id, "")
        json_work_new.update_last_bot_msg_t(user_id, "")
        json_work_new.update_teacher_msg(user_id, "")
        json_work_new.update_chosen_faculty(user_id, "")
        json_work_new.update_answer_t(user_id, "")
    user_markup.add('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ')
    user_markup.add('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=user_markup)


@dp.message_handler(lambda message: message.text== '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
async def cmd_start(message: types.Message):
        user_id = str(message.chat.id) 
        user_status = json_work_new.get_user_status(user_id)

        if user_status == '–°—Ç–∞—Ä–æ—Å—Ç–∞ ü§†' :
            #if last_command == 
            json_work_new.update_last_user_command_s(user_id, message.text)
            user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            user_markup.add('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')
            await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', reply_markup=user_markup)

        else:
            if user_status == '–°—Ç—É–¥–µ–Ω—Ç ü§ì':
                json_work_new.update_last_user_command_s(user_id, "")

            elif user_status == '–£—á–∏—Ç–µ–ª—å üë®‚Äçüè´üë©‚Äçüè´':
                json_work_new.update_last_user_command_t(user_id, "")

            await message.reply("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)